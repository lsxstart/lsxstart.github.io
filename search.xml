<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>24_5_22 组会汇报</title>
      <link href="/archives/c22fb191.html"/>
      <url>/archives/c22fb191.html</url>
      
        <content type="html"><![CDATA[<h3 id="24-5-22-组会汇报"><a href="#24-5-22-组会汇报" class="headerlink" title="24_5_22 组会汇报"></a>24_5_22 组会汇报</h3><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>学习 EasyDataSet 的使用</p><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><ol><li>利用minerU软件将PDF转换成markdown</li></ol><p>模型对于具备良好结构划分的 Markdown 文献理解效果最好，优先上传 Markdwon 文件。</p><ol start="2"><li>利用deepseek-chat生成了初始微调数据集</li></ol><p><strong><img src="/archives/c22fb191/image-20250522124324507.png" class=""></strong></p><ol start="3"><li><mark><strong>遇到的问题</strong></mark></li></ol><p><strong>领域树可以让每条数据集具备全局理解的能力，并且减少生成重复数据集的可能性。</strong></p><p>模型在文本切割完成后，平台没有直接调用大模型自动基于文献数据建立领域标签树，导致生成的领域树视图里没有标签，这样数据的专业性不足。</p><p><strong><img src="/archives/c22fb191/ba9ae6c09f78af899174764c0032c48.png" class=""></strong></p><p><strong><img src="/archives/c22fb191/ef0ba87a0a09c0ebcf106058a399f79.png" class=""></strong></p><p>咨询了软件的作者后，查询了运行日志发现，在生成领域树的时候API调用失败，DS官方认为我传入的文案有敏感数据。。。</p><p><strong><img src="/archives/c22fb191/c57d2bcfb7b44b6e61799373f9a35be.png" class=""></strong></p><p>解决方式：</p><p>打算用阿里的千问和火山引擎的豆包重新进行生成，这两个模型我已经配置好apiKey了，观察能否正常调用API生成领域树，当然之前DS官方生成的数据集会保留，之后和两模型生成的数据一起进行微调。</p><p><strong><img src="/archives/c22fb191/image-20250522125945981.png" class=""></strong></p><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><ol><li>继续熟练使用 EasyDataSet ，用不同的大模型生成数据集</li><li>学习LLaMa-Factory，将软件生成的数据集在LLaMa-Factory上进行实验</li></ol>]]></content>
      
      
      <categories>
          
          <category> 组会汇报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24_5_16组会汇报</title>
      <link href="/archives/fa4e0a33.html"/>
      <url>/archives/fa4e0a33.html</url>
      
        <content type="html"><![CDATA[<h3 id="24-5-16-组会汇报"><a href="#24-5-16-组会汇报" class="headerlink" title="24_5_16 组会汇报"></a>24_5_16 组会汇报</h3><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><ol><li>学习微调专用的 13-Crop 指令跟随数据集的构建过程</li><li>deepseek-7b 模型 与 ChatCLM3-6b 对比</li></ol><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><h4 id="13-Crop-指令数据集的构建过程：小麦为例子"><a href="#13-Crop-指令数据集的构建过程：小麦为例子" class="headerlink" title="13-Crop 指令数据集的构建过程：小麦为例子"></a>13-Crop 指令数据集的构建过程：小麦为例子</h4><h5 id="原始文本"><a href="#原始文本" class="headerlink" title="原始文本"></a>原始文本</h5><p><strong><img src="/archives/fa4e0a33/Snipaste_2025-05-15_21-10-01.png" class=""></strong></p><hr><p><strong><img src="/archives/fa4e0a33/Snipaste_2025-05-15_21-14-12.png" class=""></strong></p><h5 id="阶段1-：指令生成"><a href="#阶段1-：指令生成" class="headerlink" title="阶段1 ：指令生成"></a>阶段1 ：指令生成</h5><p>阶段函数：instruction_generation(folder_path)</p><p><strong>核心任务</strong>：读取文本 → 用 LLM 生成指令 → 去重 → 保存到 instruction.json</p><p><mark><strong>用LLM生成指令</strong></mark></p><p>构造 prompt，调用模型生成多个指令</p><p><strong><img src="/archives/fa4e0a33/Prompt.png" class=""></strong></p><p><mark><strong>去重</strong></mark></p><p>在构建微调数据集的过程中，为了避免指令内容重复，引入 ROUGE-L 相似度评估机制。具体来说，对于每条新生成的指令，计算其与已有所有指令之间的 <mark>ROUGE-L F1 分数</mark>，若任一匹配分数大于或等于 <strong>0.7</strong>，则认为语义过于接近，该指令将被过滤掉。这一策略有效提升了训练数据的多样性与泛化能力。</p><h5 id="阶段2：原始回答生成"><a href="#阶段2：原始回答生成" class="headerlink" title="阶段2：原始回答生成"></a>阶段2：原始回答生成</h5><p>阶段函数：original_output()</p><p><strong>核心任务</strong>：从 <code>instruction.json</code> 中读取每条指令 → 调用模型生成 output → 保存到 original_output.json</p><h5 id="阶段3：-回答润色"><a href="#阶段3：-回答润色" class="headerlink" title="阶段3： 回答润色"></a>阶段3： 回答润色</h5><p>阶段函数：output()</p><p>核心任务：将每组 <code>instruction + 原始 output</code> 与上下文拼接(上下文增强理解：<strong>每个 instruction 与对应上下文绑定，提高问答的相关性和实用性</strong>) → 构建 prompt3 → 请求润色 → 保存到 finetune_output.json</p><p><mark>利用prompt3作为系统提示</mark></p><p><strong><img src="/archives/fa4e0a33/Prompt3.png" class=""></strong></p><h5 id="三阶段对比"><a href="#三阶段对比" class="headerlink" title="三阶段对比"></a>三阶段对比</h5><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>       <span class="token punctuation">{</span>        <span class="token property">"instruction"</span><span class="token operator">:</span> <span class="token string">"小麦黄矮病的防治措施有哪些？"</span><span class="token punctuation">,</span>        <span class="token property">"input"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"output"</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"instruction"</span><span class="token operator">:</span> <span class="token string">"小麦黄矮病的防治措施有哪些？"</span><span class="token punctuation">,</span>        <span class="token property">"input"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"output"</span><span class="token operator">:</span> <span class="token string">"答：小麦黄矮病的防治措施包括：选用抗病品种、轮作、深翻土地、清除杂草、药剂防治等。"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"instruction"</span><span class="token operator">:</span> <span class="token string">"小麦黄矮病的防治措施有哪些？"</span><span class="token punctuation">,</span>        <span class="token property">"input"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"output"</span><span class="token operator">:</span> <span class="token string">"答：小麦黄矮病的防治措施包括选用抗病品种、轮作、深翻土地、清除杂草、药剂防治等。其中，选用抗病品种是最有效的防治措施。"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据生成后，所有指令跟踪数据都要经过人工检查、数据清理和整合，以构建一个全面、高质量的指令跟踪数据集，用于 13 种作物的病害管理。</p><h4 id="deepseek-7b-模型-与-ChatCLM3-6b-对比"><a href="#deepseek-7b-模型-与-ChatCLM3-6b-对比" class="headerlink" title="deepseek-7b 模型 与 ChatCLM3-6b 对比"></a>deepseek-7b 模型 与 ChatCLM3-6b 对比</h4><table><thead><tr><th>维度</th><th>DeepSeek-7B</th><th>ChatGLM3-6B</th></tr></thead><tbody><tr><td>训练语料</td><td>2T+ <strong>高质量中英双语数据</strong>（比例中英接近）包括代码、百科、论文、网页、对话等</td><td>1.4T+ <strong>以中文为主的多领域语料</strong>（中文占比更高）来源包括知乎、维基、书籍、问答、新闻等</td></tr><tr><td>多语种能力</td><td>强：训练中英文比例均衡，适用于英文任务、代码任务</td><td>偏弱：优化目标集中在中文任务和中文对话</td></tr><tr><td>微调生态</td><td>HuggingFace + DeepSeek 官方工具链</td><td>支持 ChatGLM 官方工具链（如 ChatGLM-Training）、transformers、LoRA 等</td></tr><tr><td>应用定位</td><td>更泛用：适用于中英通用、代码生成、通识问答</td><td>中文领域优选：对话、问答、知识类任务表现好</td></tr><tr><td>微调门槛</td><td>参数多（7B），显存需求适中（16–24GB 可微调）</td><td>参数较小（6B），显存更低要求，适合轻量设备</td></tr><tr><td>指令遵循性</td><td>高，英文+中英文双语 prompt 适应良好</td><td>高，尤其在中文命令结构上响应稳定</td></tr><tr><td>开源生态</td><td>社区正逐渐扩大，推理性能优秀</td><td>国内社区活跃度高，兼容各类中文数据</td></tr></tbody></table><p><strong>训练语料对比</strong></p><table><thead><tr><th>来源</th><th>DeepSeek-7B</th><th>ChatGLM3-6B</th></tr></thead><tbody><tr><td>英文网页</td><td>✅（大量）</td><td>❌（极少）</td></tr><tr><td>中文问答</td><td>✅（知乎、百度知道）</td><td>✅（知乎、豆瓣、互动百科）</td></tr><tr><td>维基百科</td><td>✅（中英双版本）</td><td>✅（以中文为主）</td></tr><tr><td>书籍语料</td><td>✅（OpenBook 类型）</td><td>✅（部分中文电子书）</td></tr><tr><td>代码数据</td><td>✅（大量，GitHub、StackOverflow）</td><td>❌（几乎无代码数据）</td></tr><tr><td>专业领域语料</td><td>✅（金融、医疗、科研等）</td><td>✅（中文专用术语库）</td></tr></tbody></table><p><mark><strong>对比结论</strong></mark></p><ul><li>数据集是中英文混合，<strong>以信息抽取、决策建议为核心</strong>，使用 <code>DeepSeek-7B</code>；</li><li>任务全为<strong>中文农业知识问答、病害诊断和防控建议类指令</strong>，推荐 <code>ChatGLM3-6B</code>，因为其语义理解更贴近中文语境，少量数据也能 fine-tune 得很好；</li><li>二者都可通过 <strong>QLoRA + PEFT</strong> 在单卡上高效微调；</li></ul><blockquote><p>QLoRA + PEFT 是当前大语言模型微调的主流方法，它通过对模型进行 <strong>4-bit 量化</strong> 和 <strong>只训练少量 LoRA 插件参数</strong>，在保证性能的同时，大幅降低训练资源需求，使得我们可以在 <strong>单张显卡上高效完成对 DeepSeek-7B 或 ChatGLM3-6B 的微调任务</strong>。</p></blockquote><ul><li>若条件允许，可用相同数据集对两者分别微调，再对比其响应的准确率、内容深度、结构质量和 hallucination 率等指标。</li></ul><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><h4 id="利用-EasyDataSet-实现将领域文献转换成可供模型微调的数据集（与本方法的微调数据集做对比）"><a href="#利用-EasyDataSet-实现将领域文献转换成可供模型微调的数据集（与本方法的微调数据集做对比）" class="headerlink" title="利用 EasyDataSet 实现将领域文献转换成可供模型微调的数据集（与本方法的微调数据集做对比）"></a>利用 EasyDataSet 实现将领域文献转换成可供模型微调的数据集（与本方法的微调数据集做对比）</h4><p><a href="https://github.com/ConardLi/easy-dataset/blob/1.3.1/README.zh-CN.md">https://github.com/ConardLi/easy-dataset/blob/1.3.1/README.zh-CN.md</a></p><p>Easy Dataset 是一个专为创建大型语言模型（LLM）微调数据集而设计的应用程序。用于上传特定领域的文件，智能分割内容，生成问题，并为模型微调生成高质量的训练数据。</p><p>通过 Easy Dataset，可以将领域知识转化为结构化数据集，兼容所有遵循 OpenAI 格式的 LLM API，使微调过程变得简单高效。</p><h4 id="学习LLaMa-Factory"><a href="#学习LLaMa-Factory" class="headerlink" title="学习LLaMa-Factory"></a>学习LLaMa-Factory</h4><p><strong>LLaMA-Factory 是一个专为大语言模型定制微调设计的高效训练框架</strong>，特别适用于我们当前农业场景中的中文模型微调任务。它集成了 HuggingFace Transformers、PEFT（LoRA/QLoRA）、BitsAndBytes 等主流技术，支持包括 DeepSeek、ChatGLM3、Baichuan 等模型的一键式指令微调、量化微调与偏好优化训练。</p>]]></content>
      
      
      <categories>
          
          <category> 组会汇报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24_5_9 组会汇报</title>
      <link href="/archives/ddf56d02.html"/>
      <url>/archives/ddf56d02.html</url>
      
        <content type="html"><![CDATA[<h3 id="24-5-9-组会汇报"><a href="#24-5-9-组会汇报" class="headerlink" title="24_5_9 组会汇报"></a>24_5_9 组会汇报</h3><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>论文阅读： CDIP-ChatGLM3： 集成计算机视觉和语言建模的双模型方法，用于作物病害识别和处方</p><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><p>LLMs 在一般语言任务中表现出色，但由于其训练数据中缺乏专业知识，它们在解决特定领域的问题举步维艰。</p><p><strong>检索增强生成（RAG）</strong>和<strong>微调</strong>是纳入专有和特定领域数据的两种常用方法。</p><p>RAG 在<strong>相关数据唾手可得的情况下尤为有效</strong>，如农场数据解释，可生成简洁且符合上下文的准确回复。然而，在数据有限或不完整的情况下，依赖外部数据检索系统可能会导致性能不一致。</p><p>相比之下，“<strong>微调 ”技术通过在精心策划的数据集上对模型进行再训练</strong>，使其能够将特定领域的知识内化，从而增强其生成精确、上下文丰富的响应的能力，而无需依赖外部检索系统，但由于需要大量的数据准备和计算资源，因此前期成本较高。</p><h4 id="数据集准备"><a href="#数据集准备" class="headerlink" title="数据集准备"></a>数据集准备</h4><ul><li>微调专用的 13-Crop 指令跟随数据集</li></ul><p><mark><strong>基于三阶段的高质量数据集生成方法</strong></mark>，与基于两阶段的 SELF-QA 方法相比，该方法能生成更多更简洁的说明和更全面详细的答复，使农民更容易和更准确地进行操作。</p><p><strong><img src="/archives/ddf56d02/image-20250508202102446.png" class=""></strong></p><p>在准备好上下文数据后，微调数据集的生成分<strong>三个阶段进行</strong></p><ol><li>首先，Llama3.1-405b-instruct 模型根据 Prompt1，结合分区文本中的上下文信息生成指令。</li><li>其次，根据提示 2执行这些指令以产生初始输出。</li><li>最后，Llama3.1405b-instruct 模型根据 Prompt3（将初始输出与上下文数据整合，从而完善了初始输出，确保了逻辑连贯性和关键见解的提取。</li></ol><p><strong><img src="/archives/ddf56d02/image-20250508202605645.png" class=""></strong></p><p>生成后，所有指令跟踪数据都要经过人工检查、数据清理和整合，以构建一个全面、高质量的指令跟踪数据集，用于 13 种作物的病害管理。</p><p><strong>该数据集用于微调大型语言模型</strong></p><ul><li>通用数据集 Alpaca</li></ul><p>选择了公开可用的 <strong>Alpaca 数据集</strong>来减轻灾难性遗忘</p><p>灾难性遗忘在特定领域的大型语言模型中非常常见，尤其是在学习专业知识和术语时。获取专业知识往往会导致常识的丢失，从而削弱它们的语言能力。</p><p>将Alpaca作为通用数据集，与上述数据集相结合，进行微调训练，可以设定混合比例，灾难性遗忘问题将得到大幅缓解。</p><ul><li>通用语言能力基准测试数据集 CMMLU</li></ul><p><strong>中文大规模多任务语言理解（CMMLU）基准数据集</strong>（用于测试模型微调后的推理能力），数据集由单项选择题组成，这些问题及其答案选择旨在测试模型对复杂和特定领域知识的理解，因此是评估 ChatGLM 等中文模型在不同领域应用情况的重要工具。</p><ul><li>用于模型专业知识测试的定制专用数据集</li></ul><p>从微调专业数据集中选取了 200 或具有代表性的农作物病害防控问题，并以这些问题的原始答案作为标准答案，<strong>创建了专业能力测试数据集</strong>。</p><p>然后使用 Llama3.1-405b-instruct 获得了每个问题的四个变体，原问题和标准答案以及四个变体组成一组。</p><p>分别输入微调模型、原始模型和三个最先进的模型，包括 GPT-4o）、Llama3.1-405b-instruct 和 Qwen-max，并生成答案，以评估其专业能力。</p><ul><li>用于多模态性能测试的图像理解测试数据集</li></ul><p>为了比较我们的模型和 SOTA 多模态语言模型在疾病图像上的分类性能，我们从每个疾病类别中随机选取了 10 张图像来构建<strong>图像理解测试数据集</strong>。</p><ul><li>图像数据集。</li></ul><h4 id="采用ChatGLM3-6B-作为基础大语言模型"><a href="#采用ChatGLM3-6B-作为基础大语言模型" class="headerlink" title="采用ChatGLM3-6B 作为基础大语言模型"></a>采用ChatGLM3-6B 作为基础大语言模型</h4><p>ChatGLM3-6B 是 ChatGLM 系列的高级版本，专为中文语言任务而设计，是在专业领域进行微调的理想基础模型，在整体性能和计算效率之间实现了最佳平衡，还能在现有 GPU 上进行微调。</p><p>该实验在配有英特尔（R）酷睿（TM）i9-14900 K CPU、128 GB 内存和英伟达（R）RTX 4090 显卡（24 GB 显存）的系统上进行。</p><h4 id="利用LoRA-和冻结调整对ChatGLM3-6B-LLM-进行微调，比较了两种训练策略–多任务学习（MTL）和双阶段混合微调（DMT）"><a href="#利用LoRA-和冻结调整对ChatGLM3-6B-LLM-进行微调，比较了两种训练策略–多任务学习（MTL）和双阶段混合微调（DMT）" class="headerlink" title="利用LoRA 和冻结调整对ChatGLM3-6B LLM 进行微调，比较了两种训练策略–多任务学习（MTL）和双阶段混合微调（DMT）"></a>利用LoRA 和冻结调整对ChatGLM3-6B LLM 进行微调，比较了两种训练策略–多任务学习（MTL）和双阶段混合微调（DMT）</h4><p>区别在于 Freeze 方法的可训练层数、LoRA 的特定值（如 LoRA alpha (16)和 rank (8)</p><p>微调可能会导致灾难性遗忘，引入MTL和双阶段混合微调DMT，以确定专业数据集和通用数据集不同组合的最佳效果。</p><p>MTL 直接混合专业数据和通用数据进行微调。</p><p>相比之下，DMT 首先在专业数据集上执行微调，然后利用不同比例的专业数据和一般数据进行进一步微调，以提高模型性能。</p><p><strong><img src="/archives/ddf56d02/image-20250508204325448.png" class=""></strong></p><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><ol><li>深入源码，学习微调专用的 13-Crop 指令跟随数据集的构建过程，尤其是切割可编辑上下文，再人工进行处理的过程，并且再阅读相关的文献，进行动手实践</li><li>可否用 deepseek-7b模型进行基础大语言模型微调？？？和ChatGLM3-6b进行对比</li><li>再对LoRA 、冻结调整进行学习</li></ol>]]></content>
      
      
      <categories>
          
          <category> 组会汇报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组会 </tag>
            
            <tag> 论文经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读_ CDIP-ChatGLM3：集成计算机视觉和语言建模的双模型方法，用于作物病害识别和处方</title>
      <link href="/archives/995740c3.html"/>
      <url>/archives/995740c3.html</url>
      
        <content type="html"><![CDATA[<h3 id="CDIP-ChatGLM3：-集成计算机视觉和语言建模的双模型方法，用于作物病害识别和处方"><a href="#CDIP-ChatGLM3：-集成计算机视觉和语言建模的双模型方法，用于作物病害识别和处方" class="headerlink" title="CDIP-ChatGLM3： 集成计算机视觉和语言建模的双模型方法，用于作物病害识别和处方"></a>CDIP-ChatGLM3： 集成计算机视觉和语言建模的双模型方法，用于作物病害识别和处方</h3><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>深度学习（DL）模型在植物病害识别方面表现出了极高的准确性，但由于缺乏专业和可操作的指导，它们对农民的实际效用仍然有限。</p><p><strong>为了弥补这一差距，我们开发了 CDIP-ChatGLM3，这是一个创新的框架，它将最先进的基于 DL 的计算机视觉模型与经过微调的大语言模型 (LLM) 相结合，专为作物病害识别和处方（CDIP）而设计。</strong></p><p>在对 48 种疾病和 13 种作物的 10 个 DL 模型进行评估后，EfficientNet-B2 在 95% 的置信度下获得了 97.97% ± 0.16% 的最高准确率。在此基础上，我们利用低库适应（LoRA）和冻结调整对广泛使用的 ChatGLM3-6B LLM 进行了微调，优化了其提供精确疾病管理处方的能力。我们比较了两种训练策略–多任务学习（MTL）和双阶段混合微调（DMT）–使用特定领域数据集和一般数据集的不同组合。使用 DMT 进行冻结调整后，性能大幅提高，BLEU-4 提高了 33.16%，平均 ROUGE F 分数提高了 27.04%，超过了原始模型和 Qwen-max、Llama-3.1-405B-Instruct 和 GPT-4o 等最先进的竞争对手。CDIPChatGLM3 的双模型架构充分利用了计算机视觉在基于图像的疾病检测方面的互补优势，以及 LLM 在上下文化、特定领域文本生成方面的互补优势，提供了无与伦比的专业性、可解释性和可扩展性。与混合模式的资源密集型多模态模型不同，我们的双模态方法既能保持效率，又能在疾病识别和可操作处方生成方面实现卓越性能。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>在这项研究中，我们引入了一种双模型方法，既能准确识别疾病，又能提供及时、交互式的精准处方建议。</p><p><strong>这种方法集成了先进的深度学习视觉模型和专门的中文模型，该模型在高质量的专家资料基础上进行了微调</strong>。可以得出三个主要结论。</p><p>首先，我们建立的基于 EfficientNet-B2 的疾病识别模型优于所有其他模型，在 95% 置信度下，准确率达到 97.97 % ± 0.16 %，召回率达到 97.17 % ± 0.46 %，F1 分数达到 97.12 % ± 0.10 %，精确率达到 97.18 % ± 0.59 %。</p><p>其次，CDIP-ChatGLM3微调模型采用Freeze方法和DMT训练策略，在农作物病虫害防控语料库的专业数据集和通用数据集的不同组合上进行了评估，在专业能力和通用能力上都优于其他模型，在BLEU-4、ROUGE和CMMLU准确度指标上都取得了大幅提高，并且错误率较低。</p><p>最后，CDIP-ChatGLM3 以病害图像为输入，实现了及时、交互式的准确病害防控，极大地方便了农民，确保了作物生产安全。今后，我们将开发效率和准确性更高的识别模型，以及专业性和通用性更强的大型语言模型，不断更新 CDIPChatGLM3 模型，供农民实际使用。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="微调和RAG"><a href="#微调和RAG" class="headerlink" title="微调和RAG"></a>微调和RAG</h4><p>大语言模型（LLMs）非常适合解决为农民提供清晰的交互式指导等问题，因为它们擅长理解和生成类人文本（Raiaan 等人，2024 年；Zhao 等人，2023 年）。它们使用户能够通过直接、交互式的提问获得及时、可读的回复。研究表明，LLMs 在农业领域，尤其是作物管理领域非常有效（Raiaan 等人，2024 年；Yenduri 等人，2024 年）。例如，基于由 OpenAI 开发的 LLM–聊天生成预训练转换器（ChatGPT），Wang 等人（2022 年）开发了一个作物病虫害防治问题解答系统，其得分高于其他六种最先进的方法。Silva 等人（2023 年）对 Llama、GPT-3.5 和 GPT-4 等流行的大型语言模型回答农业相关问题的能力进行了评估，结果表明 GPT-4 的性能最高，能正确回答 93% 的问题。Qing等人（2023）提出了一种深度学习视觉模型YOLOPC和ChatGPT-4相结合的方法来准确识别柑橘的病虫害并提供诊断报告，实现了较高的识别和推理准确率。此外，==多模态 LLM 也被用于解决特定领域的问题，在某些任务中表现出卓越的性能（Kerdvibulvech，2025 年）==。虽然这些 LLMs 在一般语言任务中表现出色，但由于其训练数据中缺乏专业知识，它们在解决特定领域的问题（如与植物病害管理相关的问题）时往往举步维艰（Yang 等人，2024 年）。为了解决这些局限性并提高 LLM 在植物疾病管理等专业领域的性能，研究人员探索了将特定领域知识纳入这些模型的策略。检索增强生成（RAG）和微调是纳入专有和特定领域数据的两种常用方法（Gupta 等人，2024 年）。RAG 在相关数据唾手可得的情况下尤为有效，如农场数据解释，可生成简洁且符合上下文的准确回复（Lewis 等人，2020 年；Swenor，2022 年）。然而，在数据有限或不完整的情况下，依赖外部数据检索系统可能会导致性能不一致（S. Xu 等人，2024 年）。相比之下，“微调 ”技术通过在精心策划的数据集上对模型进行再训练，使其能够将特定领域的知识内化，从而增强其生成精确、上下文丰富的响应的能力，而无需依赖外部检索系统，但由于需要大量的数据准备和计算资源，因此前期成本较高（Xue 等人，2021 年）。</p><p>本研究旨在通过引入一种新颖的双模型集成方法，将专门的疾病识别模型与 LLM 结合起来，提供量身定制的处方，从而提高深度学习在作物病害管理中的实际应用。与以往试图在单一框架内处理图像识别和文本生成的多模式方法不同，我们的双模型方法利用了两个独立优化系统的优势。首先，我们评估了 10 种计算机视觉模型，以识别 13 种作物的 48 种疾病。接下来，我们使用两种方法对大型语言模型 ChatGLM3-6B 进行微调，以提高其在作物疾病管理领域的专业能力。最后，我们开发了 CDIPChatGLM3，将表现最佳的病害识别模型与微调后的 ChatGLM3-6B 结合起来，协助相关种植者进行作物病害识别和处方开具（CDIP）。这种双模型方法不仅提高了诊断和建议的整体准确性，还提供了更大的灵活性和可扩展性，允许对每个组件进行独立升级和改进。因此，农民可以从准确的病害诊断无缝过渡到精确的治疗建议，从而降低成本，最大限度地减少对环境的影响，并防止农药的过度使用。</p><h4 id="材料和方法"><a href="#材料和方法" class="headerlink" title="材料和方法"></a>材料和方法</h4><h5 id="1-Disease-identification-models"><a href="#1-Disease-identification-models" class="headerlink" title="1. Disease identification models"></a>1. Disease identification models</h5><h5 id="2-Large-language-model-and-fine-tuning"><a href="#2-Large-language-model-and-fine-tuning" class="headerlink" title="2. Large language model and fine-tuning"></a>2. Large language model and fine-tuning</h5><p><strong>2.1  数据集准备</strong></p><p>在 CDIP-ChatGLM3 的开发过程中，使用了==六==个数据集进行训练、测试、验证和基准测试，其中包括微调专用的 13-Crop 指令跟随数据集、通用数据集 Alpaca（Taori 等，2023 年）、通用语言能力基准测试数据集 CMMLU（Li 等，2023 年）、用于模型专业知识测试的定制专用数据集、用于多模态性能测试的图像理解测试数据集以及第 2.1.1 节中介绍的图像数据集。表 4 列出了这些数据集的主要特征。下文将详细介绍每个数据集的获取过程。13 种作物栽培指导数据集来自 13 本涉及作物栽培和疾病管理的书籍，每种作物有一本专门的书籍（见表 1）。由于<strong>高质量的微调数据集对下文采用的监督微调方法至关重要</strong>，因此采用了==<em>基于三阶段的高质量数据集生成方法（Dong 等人，2023 年）</em>==。与基于两阶段的 SELF-QA 方法（张和杨，2023 年）相比，该方法能生成更多更简洁的说明和更全面详细的答复，使农民更容易和更准确地进行操作。工作流程如图 4 所示。我们首先收集了有关 13 种作物病害管理的 PDF 格式专业教科书（见补充材料 STable1）。然后，利用光学字符识别（OCR）技术将文本内容提取为可编辑格式。随后，按章节、段落或病害类别对提取的文本进行人工分段，生成多个具有完整语义逻辑的特定上下文文本文件，每个分段保存为单独的 .txt 文件。</p><p>每个 txt 文件都作为上下文数据输入 Llama3.1-405b-instruct 模型，在准备好上下文数据后，微调数据集的生成分==三个阶段进行==（图 4）。首先，Llama3.1-405b-instruct 模型根据 Prompt1（如 STable2 所示），结合分区文本中的上下文信息生成指令。其次，根据提示 2（如表 3 所示）执行这些指令以产生初始输出。最后，Llama3.1405b-instruct 模型根据 Prompt3（如 STable 4 所示）将初始输出与上下文数据整合，从而完善了初始输出，确保了逻辑连贯性和关键见解的提取。为进一步说明这一过程，表 5 提供了一个示例，说明水稻纹枯病专业防控信息的指令数据生成过程。</p><p> <img src="/archives/Users\sxxgg\AppData\Roaming\Typora\typora-user-images\image-20250508103506712.png" alt="image-20250508103506712"></p><p>生成后，所有指令跟踪数据都要经过人工检查、数据清理和整合，以构建一个全面、高质量的指令跟踪数据集，用于 13 种作物的病害管理。图 5 显示了为每种作物生成的指令跟踪数据实例数量。对每种作物类别的实例数进行了校准，以实现均匀分布，各类别共生成 2,500 个实例，每个实例占总数的 6.7% 到 9.6%。==该数据集用于微调大型语言模型==，在训练过程中随机抽取 10% 作为验证集，以确保作物类别分布一致。</p><p><img src="/archives/Users\sxxgg\AppData\Roaming\Typora\typora-user-images\image-20250508104730734.png" alt="image-20250508104730734"></p><p>由于其广泛的多样性和全面的领域覆盖（表 4），我们选择了公开可用的 ==Alpaca 数据集==来减轻灾难性遗忘，该数据集包含大量多样化、高质量和开放式的通用问题，涵盖数学和编码等多个领域。灾难性遗忘在特定领域的大型语言模型中非常常见（Kirkpatrick 等人，2017 年），尤其是在学习专业知识和术语时。获取专业知识往往会导致常识的丢失，从而削弱它们的语言能力。将一部分通用数据与专业知识数据混合在一起，可以帮助模型 “回忆 ”丢失的通用知识，缓解专业知识训练过程中的灾难性遗忘问题（Hayes 等人，2020 年）。我们将羊驼作为通用数据集，与我们关于 13 种不同作物的高质量指令跟踪专用数据集相结合，进行微调训练（Dong 等人，2023 年；Taori 等人，2023 年）。通过设定专门数据集与羊驼数据集的混合比例，预计灾难性遗忘问题将得到大幅缓解。</p><p>==中文大规模多任务语言理解（CMMLU）基准数据集==（Li 等人，2023 年）用于测试模型微调后的推理能力。CMMLU 是一个综合基准，旨在评估大型语言模型在中国语言和文化背景下的知识和推理能力。它横跨 67 个学科，包括科学、技术、工程和数学（STEM）领域、社会科学和人文科学，尤其侧重于中国特有的任务，如中医和中国驾驶规则。数据集由单项选择题组成，每个科目都有少量的开发集和更广泛的测试集。这些问题及其答案选择旨在测试模型对复杂和特定领域知识的理解，因此是评估 ChatGLM 等中文模型在不同领域应用情况的重要工具。</p><p>🚩为了测试微调模型的专业能力，我们从微调专业数据集中选取了 200 个经常遇到或具有代表性的农作物病害防控问题，并以这些问题的原始答案作为标准答案，==创建了专业能力测试数据集==。根据这些选定的问题，使用 Llama3.1-405b-instruct （S. Chen 等，2023 年）获得了每个问题的四个变体，表达了与原问题相同的意思（变体获得过程见补充材料 STable 6）。原问题和标准答案以及四个变体组成一组。所创建的专业知识测试数据集共包括 200 组。在测试模型的专业能力时，将这些问题组分别输入微调模型、原始模型和三个最先进的模型，包括 GPT-4o（Achiam 等，2023 年）、Llama3.1-405b-instruct 和 Qwen-max（Bai 等，2023 年），并生成答案，以评估其专业能力。</p><p>为了比较我们的模型和 SOTA 多模态语言模型在疾病图像上的分类性能，我们从每个疾病类别中随机选取了 10 张图像来构建==图像理解测试数据集==。</p><p><strong>2.2  ChatGLM3-6B 作为基础大语言模型</strong> </p><p>ChatGLM3-6B 是 ChatGLM 系列的高级版本，专为中文语言任务而设计，是在专业领域进行微调的理想基础模型，如作物病害管理等涉及受教育程度较低的中国农民的领域（GLM 等人，2024 年）。此外，ChatGLM3-6B 在整体性能和计算效率之间实现了最佳平衡。它拥有 60 亿个参数，在提供强大的通用语言理解能力的同时，还能在现有 GPU 上进行微调，特别是与拥有数百亿参数的大型模型相比。ChatGLM3 的大小适中，可以在标准硬件限制条件下进行高效的模型训练和微调，因此对于计算资源有限的机构或研究人员来说是一个可行的选择。此外，ChatGLM3-6B 还能在各种任务中保持强劲的性能，确保它既能处理一般语言处理，又能进行特定领域的微调，如作物疾病管理（GLM 等，2024 年）。与 ChatGPT 等流行的 LLM 相比，GLGM3-6B 既能整合专业知识，又能保留通用语言能力，而且广泛可用，这使它成为微调的多功能实用选择。</p><p><strong>2.3. 微调 ChatGLM3-6B 以管理作物病害</strong></p><p>尽管 ChatGLM3-6B 在自然语言处理任务方面具有很高的能力，但仍有必要进行微调，以满足农民在有效处理作物疾病方面的特定需求（Gupta 等人，2024 年）。通过根据作物保护方面的农业需求调整输出，微调可提高模型在疾病防治领域的响应能力。应仔细评估和选择常用的微调方法，以最大限度地提高这些领域的能力。为此，我们利用 LLaMA-Factory 操作平台（Zheng 等，2024 年）进行了模型微调。比较了两种广泛使用的微调方法：低秩自适应法（Low-Rank Adaptation，LoRA）和冻结微调法（Freeze）（Houlsby 等，2019；Hu 等，2021；Zheng 等，2024）。随后，对 ChatGLM3-6B 进行了全面微调，以增强其专业能力，同时保留其一般语言能力。</p><p>LoRA 是一种微调方法，旨在以最少的可训练参数有效地调整预训练语言模型。它的工作原理是在预训练模型的各层中引入==低秩适配器==，只训练降维矩阵和增维矩阵，而核心模型参数保持不变（Hu 等人，2021 年）。这使得训练过程更加集中，计算效率更高。该过程包括三个关键步骤：加载预训练模型、插入 LoRA 适配器和训练适配器。</p><p>另一方面，==冻结调整法==会选择性地冻结预训练模型中的特定层或大部分参数，在微调过程中只允许更新一小部分解码器层参数（Houlsby 等人，2019 年；Levine 等人，2022 年）。这种方法有助于保留预训练阶段学习到的特征，从而保留核心知识，同时使模型适应特定任务的需要。冻结调整法的微调过程包括四个步骤：加载预训练模型、冻结所需图层、根据需要修改模型以及训练模型。</p><p>不同的微调方法可能会在不同的任务中产生不同的性能水平（Dettmers 等人，2024；Jeong，2024）。在本研究中，我们在表 5 所列参数（包括批量大小、学习率和历时变化等细节）下对 ChatGLM3-6B 上的两种微调方法进行了评估。这些微调方法在多个 epoch（3、5、10、15、20 和 30）中进行了测试，主要区别在于 Freeze 方法的可训练层数、LoRA 的特定值（如 LoRA alpha (16)和 rank (8)），以及选择 AdamW 作为优化器和余弦学习率调度器。此外，表 5 最后两行还提供了在单个英伟达 4090 GPU 上微调 ChatGML3 的运行性能。微调方法的比较有助于找出最有效的方法，在遵守计算限制的同时提高模型的疾病预防和控制能力。</p><p>如前所述，微调可能会导致灾难性遗忘，削弱通用语言能力。为了对模型进行微调，在增强专业能力的同时保留通用语言能力，我们引入了两种训练策略，包括多任务学习（MTL）和双阶段混合微调（DMT）（Dong 等人，2023 年），以确定专业数据集和通用数据集不同组合的最佳效果，并对它们的性能进行了系统比较。MTL 直接混合专业数据和通用数据进行微调。相比之下，DMT 首先在专业数据集上执行微调，然后利用不同比例的专业数据和一般数据进行进一步微调，以提高模型性能。设计了一个工作流程来说明整个微调过程（图 6）。</p><p><img src="/archives/Users\sxxgg\AppData\Roaming\Typora\typora-user-images\image-20250508113101215.png" alt="image-20250508113101215"></p><p>工作流程以生成的专用作物病害防治数据集（称为 13 种作物指令跟踪数据集）开始，<strong>然后使用冻结和 LoRA 方法进行微调</strong>。微调完成后，将进行评估，以选择最佳微调方法和性能最佳的模型。在选定方法和模型的基础上，<strong>使用 MTL 和 DMT 进行进一步微调</strong>，并对微调结果进行比较，以确定在保留一般语言能力的同时实现最高专业知识性能的模型。</p><p><strong>2.4. 评估微调 LLM 的指标</strong></p><p>为了评估两种微调方法和两种训练策略的效果，我们采用了四种常用指标，包括==双语评估研究（BLEU）==、==面向语料库评估的召回研究（ROUGE）==、==CMMLU 准确率和输出错误率。==BLEU 用于评估机器翻译输出的质量（Papineni 等人，2002 年）。它主要衡量机器翻译输出与参考译文之间的相似度，尤其注重句子的准确性和精确匹配。BLEU 通过计算 n-grams（N 个连续词的序列）的匹配程度来评估机器翻译的精确度。BLEU 的基本原理是，机器翻译输出越接近专业人工翻译，质量就越高。BLEU 分数越高，说明机器翻译性能越好。ROUGE 指标通常用于评估文本摘要，比较自动生成的文本与参考摘要之间的重叠程度（Lin，2004 年）。我们使用了它的三种变体，包括 ROUGE-N、ROUGE-L 和平均 ROUGE F-score（Zhang 等人，2019 年）。该指标经常被用来评估自动摘要系统、机器翻译或任何涉及自然语言文本生成的任务的性能。平均 ROUGE F 分数越高，说明生成的文本与参考文本之间的一致性越好，表明模型生成的输出更连贯、更相关、更准确。</p><p>BLEU 和 ROUGE 都能帮助我们深入了解 ChatGLM3-6B 等模型生成的文本的质量。BLEU 通过评估 n-gram 匹配度来关注机器翻译的准确性和流畅性，而 ROUGE 则通过与人类参考摘要的比较来评估自动生成文本的内容保留和连贯性。这些指标有助于衡量微调模型在作物病害管理等特定领域任务中的准确性和意义。</p><p>为了评估模型的一般语言能力，我们采用了 CMMLU 准确率来衡量正确回答的问题与问题总数的比率，其计算公式如下：  </p><p><img src="/archives/Users\sxxgg\AppData\Roaming\Typora\typora-user-images\image-20250508114019418.png" alt="image-20250508114019418"></p><p>其中 Qcorrect 表示正确回答问题的数量，Qtotal 表示所有问题的数量。</p><p>此外，在生成答案的微调过程中，我们观察到该模型在不同的历时中以不同的概率重复循环，导致回答时间过长。这些重复循环可能会极大地破坏模型的鲁棒性。为了评估这种可能性，我们引入了输出错误率（简称错误率）来量化此类错误发生的可能性，计算公式如下：</p><p><img src="/archives/Users\sxxgg\AppData\Roaming\Typora\typora-user-images\image-20250508114008327.png" alt="image-20250508114008327"></p><p>其中，Rtoken 表示超过 5000 个标记的响应数，Rtotal 表示生成的响应总数。</p><p>此外，为了评估 LLM 模型的计算资源需求，我们采用了以下公式来估算其内存使用量（Anthony 等人，2023 年）</p><p><img src="/archives/Users\sxxgg\AppData\Roaming\Typora\typora-user-images\image-20250508113945322.png" alt="image-20250508113945322"></p><p>其中，M 表示 GPU 的近似内存需求，提供了执行模型所需的视频随机存取内存 (VRAM) 的简化估算。P 是模型中参数的数量。Q 表示每个参数的数值精度，以比特为单位。</p><h5 id="3-CDIP-ChatGLM3-Integration-of-identification-models-and-fine-tuned-LLM"><a href="#3-CDIP-ChatGLM3-Integration-of-identification-models-and-fine-tuned-LLM" class="headerlink" title="3  CDIP-ChatGLM3: Integration of identification models and fine-tuned LLM"></a>3  CDIP-ChatGLM3: Integration of identification models and fine-tuned LLM</h5><p>通过将选定的最佳作物病害识别模型（CDIP）与经过微调的高性能 ChatGLM3-6B 相集成，我们创建了 CDIP-ChatGLM3，这是一种用于作物病害管理的实用工具。集成工作按照以下工作流程完成。</p><p>首先，采集并上传病害图像，然后使用作物病害识别模型进行分析。生成识别结果后，将其转换为中文关键词，然后将其嵌入查询或会诊中，形成特定病害会诊。然后将该咨询提交给经过微调的 ChatGLM3-6B。为了获得准确的回复，LLM 的指令如下：</p><p>您现在是一名作物病害预防助理。请用中文回答问题，详尽描述每个问题的具体细节，并以结构化格式显示内容。”  </p><p>指令执行后，LLM 会输出回复，将病害相关的关键词嵌入预定义的模板中：  “叶子的状态是{关键词}。如果您有任何问题，请随时提问”。</p><p> 然后，农民就可以获得有关识别结果的回复，或直接与系统互动，获取相关知识或他们所寻求的任何信息。</p><p>这种集成实现了疾病识别模型与 LLM 的无缝结合。有了用于疾病识别的选定深度学习视觉模型和用于处方的微调 ChatGLM3-6B，我们开发并部署了基于 CDIP-ChatGLM3 的应用程序。当上传疾病图像时，CDIP-ChatGLM3 会以及时、互动的方式为预防和控制提供可靠、准确的响应。有了 CDIP-ChatGLM3，疾病预防和控制的效率可以大大提高。</p><h5 id="4-Experiments-design"><a href="#4-Experiments-design" class="headerlink" title="4 Experiments design"></a>4 Experiments design</h5><p><strong>2.4.1. 微调过程中模型专业知识和一般语言能力变化的实验</strong> </p><p>为了选择最佳的微调方法并评估微调后模型的特定疾病专业知识和一般语言能力，我们使用 LoRA 和 Freeze 对特定领域数据集和特定领域与一般数据集的组合进行了微调实验。微调在 30 个epoch中进行。最终选择了性能最高的微调方法，利用 MTL 和 DMT 训练策略在特定领域和一般领域相结合的数据集上进行进一步微调，目的是在保持一般语言能力和低错误率的同时，保持较高的专业能力。中文大规模多任务语言理解（CMMLU）基准（Li 等人，2023 年）被用来评估微调后的模型在中国文化背景下的通用语言能力。在这里，“零拍学习 ”是直接将提示输入到 LLM，而 “五拍学习 ”则是在目标任务中展示一系列高质量的示范，每个示范都包括输入和期望输出。在 “五次学习 ”中，模型首先要接触高质量的示例，以便更好地理解人类的意图和确定理想答案的标准。</p><p><strong>2.4.2. 微调模型在原始特定领域材料及其变体上的性能评估</strong></p><p>为了进一步检验微调模型是否能够学习、理解和应用微调专业数据集中的知识，我们对==专业知识能力测试数据集==进行了评估。我们使用原始的 ChatGLM3-6B、经过微调的 ChatGLM3-6B 以及三个最先进的 LLM 模型（包括 GPT-4o、Llama-3.1-405B 和 Qwen-max），对==数据集中的每组五个问题==生成了回答。随后，我们将生成的答案与标准答案（即原始训练材料中的答案）进行了比较。我们使用 BLEU-4 和平均 ROUGE F 分数来评估五个大型语言模型在回答疾病相关问题时的专业能力。</p><p><strong>2.4.3. CDIP-ChatGLM3 和多模态模型的比较评估</strong></p><p> 为了评估我们提出的双模型 CDIPChatGLM3 和多模态模型在疾病图像分类和理解中的性能，我们设计并进行了一项比较实验。几种最先进的通用<em><strong>多模态语言模型</strong></em>，包括 LLaVA-v1.6-7B（Li 等人，2024 年）、MiniCPM-V-2.6（Yao 等人，2024 年）、Llama-3.2-11B-Vision-Instruct（Dubey 等人，2024 年）、GLM-4-4.5（Dubey 等人，2024 年）、Llama-3.2-11B-Vision-Instruct（Dubey 等人，2024 年）、 2024 年）、GLM-4vPlus-20250111（GLM 等人，2024 年）、Qwen2.5-VL-72B-Instruct（A. Yang 等人，2024 年）、DeepSeek-VL2（Wu 等人，2024 年）和 InternVL2.5-78B （Chen 等人，2024 年）。我们使用了这些模型提供的应用程序接口或其公开的预训练版本，没有进行任何微调或训练。具体来说，LLaVA-v1.6-7B、MiniCPM-V-2.6 和 Llama-3.2-11B-Vision-Instruct 是通过 INT4 或 Q4_K_M 格式的 Ollama 推理框架在本地运行的，而 Qwen2.5-VL-72B-Instruct、DeepSeek-VL2 和 InternVL2.5-78B 则是通过 BF16 量化的外部应用程序接口访问的。GLM-4v-Plus-20250111 是闭源的，没有提供相应的模型信息。同时，CDIP-ChatGLM3 采用了 ==FP16（16 位）量化==。内存计算公式（式（7））用于估算这些模型的 GPU 内存需求。</p><p>==构建的图像理解测试数据集==被输入到这些模型中。为了确保公平比较，特别是与专门的双模型 CDIP-ChatGLM3 进行比较，我们将所有多模态语言模型的提示标准化如下：  “图片中是什么疾病？请从以下列表中选择一个且只有一个选项，并准确输出该选项，不要有任何多余的词语： [48 种作物疾病类别 + 13 种健康作物类别]”。 </p><p>最后，采用准确率（Acc）和 F1 分数作为评价指标，全面量化模型在疾病图像分类和理解方面的能力。此外，我们还采用了第 2.4.2 节所述的相同方法来评估专业能力，并利用专业能力测试数据集评估我们的方法和多模态模型在农业领域的专业能力。</p><p><strong>2.4.4. 计算环境</strong> </p><p>实验在配有英特尔（R）酷睿（TM）i9-14900 K CPU、128 GB 内存和英伟达（R）RTX 4090 显卡（24 GB 显存）的系统上进行。软件环境包括 Windows 11、CUDA 12.6 版、Python 3.10.14 版和 PyTorch 2.4.0 版。这种配置能够对模型进行有效的微调和评估，确保其能够为农民提供实时、准确的疾病管理建议。</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><h4 id="1-疾病识别模型的性能"><a href="#1-疾病识别模型的性能" class="headerlink" title="1. 疾病识别模型的性能"></a>1. 疾病识别模型的性能</h4><p>10 个分类模型对疾病分类的实验结果如图 7 所示。</p><p><img src="/image-20250508153649923.png" alt="image-20250508153649923">采用 EfficientNet 架构的模型在所有指标上都取得了最高和最低的性能，其中 EfficientNetB2 排名第一，EfficientNetV2-S 排名最后。ResNet、MobileNet 和 Swintransformer 的性能接近和中等偏上。FasterNets 的性能仅低于最高的三个 EfficientNets。在大多数架构中，不同规模的模型及其变体在性能上仅有细微差别。只有 EfficientNet 中的 EfficientNetV2-S 的性能明显低于其他 EfficientNet，而两个 FasterNet 的性能差异较小。在 10 个模型中，EfficientNet-B2 在 95% 置信度下的准确率（97.97 % ± 0.16 %）、召回率（97.17 % ± 0.46 %）、精确率（97.18 % ± 0.59 %）和 F1 分数（97.12 % ± 0.10 %)都是最高的。</p><p><img src="/image-20250508153913429.png" alt="image-20250508153913429"></p><p>图 8 显示了表现最佳的 EfficientNet-B2 模型对所有病害的分类准确率，其中樱桃、柑橘、玉米、葡萄、桃、草莓和番茄作物的分类准确率较高。在这些作物中，大多数病害类别的准确率超过 95%，相当一部分达到了 100%。相比之下，苹果、辣椒、马铃薯、水稻和小麦作物的病害分类准确率相对较低，而且这些作物中不同病害类别的准确率差异很大。值得注意的是，樱桃和草莓作物的平均分类准确率最高，达到 100%，而水稻的平均准确率最低，水稻糙叶病的分类准确率仅为 70.18%。有关病害识别模型的更多详情，请参阅补充材料。具体而言，图 5 显示了前 40 个错误分类对，而图 6 则显示了模型在不同级别的分类性能。</p><h4 id="2-CDIP-ChatGLM3-在疾病管理处方中的表现"><a href="#2-CDIP-ChatGLM3-在疾病管理处方中的表现" class="headerlink" title="2. CDIP-ChatGLM3 在疾病管理处方中的表现"></a>2. CDIP-ChatGLM3 在疾病管理处方中的表现</h4><p><img src="/image-20250508154400526.png" alt="image-20250508154400526"></p><p>图 9 展示了使用 LoRA 和 Freeze 方法对 ChatGLM3-6B 在专业数据集上的微调结果（图 9a 和图 9b），以及微调后模型在基准 CMMLU 上的一般能力测试结果（图 9c 和图 9d）。结果表明，两种微调方法的 BLEU-4 和 ROUGE 分数都随着微调历时的增加而增加，与原始 ChatGLM3-6B 相比性能有所提高。值得注意的是，==Freeze 方法的性能明显优于 LoRA==，在第 10 个历元时，BLEU-4 指数接近 350。与此同时，普通语言能力在微调过程中出现了波动，性能指标低于原始 ChatGLM3-6B。此外，LoRA 微调方法的错误率较高，其特点是最初急剧上升，随后迅速下降。相比之下，Freeze 方法的错误率较低，但在不同的时间段会出现波动。在第 10 个阶段，专业能力指标相对较高，错误率也较低。尽管与最初的 ChatGLM3-6B 相比，普通语言能力略有下降，但考虑到所有因素，它仍然是最佳模型。相比之下，虽然在第 20 个历元可以获得较好的专业能力，但普通语言能力和错误率明显下降，导致鲁棒性和准确性较差。这些结果表明冻结法在专业数据集上的微调效果更佳，==因此在后续实验中采用冻结法（Freeze10）在第 10 个时程对模型进行微调。==</p><p><img src="/image-20250508155318463.png" alt="image-20250508155318463"></p><p>图 10 展示了在第 10 个历元冻结（Freeze10）和冻结方法所选择的微调模型的基础上，使用 MTL 和 DMT 训练策略对专业语言能力和通用语言能力相结合的数据集进行进一步微调的结果。在使用 MTL 时（图 10a），专业能力首先随着通用数据的增加而逐渐提高，当通用数据为专业数据的四倍时，BLEU-4 和 ROUGE 达到最高。同时，错误率先是平稳变化，然后急剧上升，在专业能力达到峰值的同一时刻达到最高值。与此相反，当使用 DMT 时（图 10b），专业能力随着专业数据集的增加而迅速提高，直到达到专业数据集的最大值，随后在一般数据增加到专业数据集的两倍之前，专业能力的上升速度放缓。同时，错误率也在波动，在加入最大专业数据集后达到最低值（图 10b）。另一方面，模型的普通语言能力在专业知识能力达到峰值的同一位置达到了接近峰值的水平，接近原始 ChatGLM3-6B 的性能（图 10d）。考虑到所有这些因素，==当包含最大数量的专业数据集和等量的一般数据时，DMT 方法取得了最佳性能。==在一般语言能力方面，零次拍摄法和五次拍摄法存在差异。采用零次搜索法时，准确率较高，但随着普通数据比例的增加（图 10c 和图 10d）或历时的增加（图 9c 和图 9d），准确率会出现波动。相比之下，采用五次拍摄法时，大多数模型的准确率都低于零次拍摄法，表现出与零次拍摄法相似的性能趋势。零发和五发都没有发现明显的变化。==根据上述实验结果，我们最终选择 Freeze10(S:2.5 K)-DMT(S:2.5 K + G2.5 K) 模型作为开发 CDIP-ChatGLM3 的微调模型==</p><p><img src="/image-20250508155839108.png" alt="image-20250508155839108"></p><p>我们的微调模型和其他比较模型的专业能力测试结果如图 11 所示。当应用于疾病控制和预防领域时，我们的微调模型在 BLEU-4 指数和平均 ROUGE F 分数方面都明显优于所有其他模型。原始 ChatGLM3-6B 的 BLEU-4 指数值在所有评估模型中最低。Llama-3.1405B-Instruct 排名第二，但明显低于我们的微调 ChatGLM3-6B（CDIP-ChatGLM3）。相比之下，GPT-4o 的 BLEU4 指数与 ChatGLM3-6B 相当，是最低的。此外，Qwen-max 的 BLEU4 指数仅略高于最低值。不过，按平均 ROUGE F 分数或 BLEU-4 排序时，这些模型的排名各不相同，但 CDIP-ChatGLM3 在这两项指标上始终排名第一。具体来说，GPT-4o 和 Qwen-max 的平均 ROUGE F score 相近，但都明显低于最高分。ChatGLM3-6B 的平均 ROUGE F 分数略低于 Qwen-max。Llama-3.1-405B-Instruct 的 BLEU-4 指数排名第二，但平均 ROUGE F 分数最低。</p><p><img src="/image-20250508160018031.png" alt="image-20250508160018031"></p><p>表 6 列出了我们的模型与流行的通用多模态模型在图像分类能力和专业知识能力方面的比较实验结果。在所有多模态模型中，Qwen2.5-VL-72B-Instruct、InternVL2.5-78B 和 GLM-4v-Plus20250111 在图像识别能力和专业知识能力上都取得了前三名的成绩，但内存消耗却明显高于其他模型。相比之下，LLaVA-v1.6-7B 和 MiniCPM-V-2.6 表现出中等的特定领域专业能力，但在图像识别和最小内存需求方面表现最低。与这两个模型相比，==DeepSeek-VL2 在图像识别方面表现一般，在专业性方面排名垫底。==虽然 Llama-3.2-11B-VisionInstruct 所需的内存少于大多数多模态模型，但它在特定领域的专业性却是最低的。==<em><strong>这些结果表明，通用多模态模型的预训练版本或 API 访问只能在我们的数据集（疾病图像和疾病指导问答）上取得有限的性能，尤其是在图像分类和专业知识任务中（表 6）。</strong></em>==相比之下，我们的双模型 CDIP-ChatGLM3 经过了视觉训练和微调，在这两方面都取得了明显更好的性能。值得注意的是，与大多数多模态模型相比，我们的模型体积最小，推理内存消耗也更少，因此可以用相对有限的资源进行训练和部署。</p><p><img src="/image-20250508160527327.png" alt="image-20250508160527327"></p><p>此外，表 7 还列出了所有测试过的视觉和语言模型的综合性能总结，以方便读者阅读。为了进一步评估 CDIP-ChatGLM3 在实际应用中的性能，表 8 列出了由原始 ChatGLM3-6B 和微调模型 CDIP-ChatGLM3 分别生成的葡萄霜霉病防治处方样本。在 Q1 问题及其回答中，下划线文字表明，==CDIP-ChatGLM3 对 “典型的时间框架是什么 ”和 “化学防治 ”的回答比原 ChatGLM3-6B 更具体，更有可操作性。==关于葡萄生长阶段的详细信息，以及具体的化学药剂名称和使用方法，为农民有效控制病害提供了实用指导。在后续问题 Q2 中，与原始模型相比，微调模型提供的综合病害管理建议更全面、逻辑结构更合理、可操作性更强。相比之下，原 ChatGLM3-6B 的回答过于笼统，限制了其对农民的实际应用。</p><p>此外，补充材料 STable 7 中还列出了三个比较大型 LLM-GPT-4o、Qwen-max 和 Llama-3.1-405B-Instruct 的响应。与这些模型相比，CDIP-ChatGLM3 提供的建议更实用、更易于实施，在特定领域的决策情境中表现出更高的精确度。然而，在定性调查中，其他大型语言模型比 CDIP-ChatGLM3 得出的回答更全面、更广泛。如需了解更多实例，请参阅补充表 9 和表 10 中的稻瘟病和小麦叶枯病处方。</p><h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><p>作物病害管理方面的挑战需要有效的识别和处方解决方案，以提高农民对先进技术的采用率。目前的 DL 模型在识别植物病害方面具有很高的准确性，但无法提供可操作的指导，从而限制了其实际效果。本研究通过开发 CDIP-ChatGLM3 来应对这些挑战，==CDIP-ChatGLM3 是一个双模型框架，它整合了用于病害识别的 EfficientNet_b2 的精确性和经过微调的 ChatGLM3-6B 的背景专业知识。==通过将精确检测与量身定制的处方相结合，这种方法缩小了技术能力与实际可用性之间的差距，促进了人工智能驱动的解决方案在农业领域的应用。</p><h4 id="4-1-疾病识别模型的性能"><a href="#4-1-疾病识别模型的性能" class="headerlink" title="4.1. 疾病识别模型的性能"></a>4.1. 疾病识别模型的性能</h4><p> 涉及十个广泛使用的深度学习模型的广泛对比实验，在实验室和现场图像的综合数据集上进行评估，得出了两个重要发现。</p><p>首先，在同一架构中，模型大小对性能的影响微乎其微。虽然较大的模型规模可能会略微改善结果，但差异仍然不大。与训练数据相比，在大多数情况下，架构对模型准确性的影响几乎可以忽略不计，这与 Tian 等人（2024 年）的研究结果一致。==其次，大多数 EfficientNets 的性能都优于其他深度学习架构==，其中 EfficientNet-B2 的性能最高，在 95% 置信度下的准确率为 97.97 % ± 0.16 %。与我们的研究类似，Tian 等人（2024 年）比较了 ResNet、MobileNet 和效能 B0，发现效能 B0 的准确率最高。尽管他们的比较只涉及 Efficient-B0，但他们的发现与我们的研究结果一致。此外，Atila 等人（2021 年）对 ResNet 和 EfficientNet 的比较也与我们的研究结果一致。虽然在他们的研究中使用 EfficientNet-B2 获得了更高的准确率，但这只是基于 PlantVillage 数据集，并没有在像我们研究中使用的那样广泛的数据集上进行验证。Zhang 等人（2024 年）仅在 Plant Village 数据集的玉米上使用 ResNet50 实现了 87.51% 的最高准确率，准确率低于我们的研究结果。==EfficientNets 和 EfficientNet-B2 的优越性可能归功于最佳复合缩放方法==，该方法结合了深度、宽度和分辨率（Tan 等人，2019 年），在满足病害识别基本要求的同时有可能降低成本。高精度、轻量级的 EfficientNet-B2 可以生成准确的疾病识别结果，确保大语言模型能够提供快速准确的处方。</p><h4 id="4-2-微调对语言模型能力的影响"><a href="#4-2-微调对语言模型能力的影响" class="headerlink" title="4.2. 微调对语言模型能力的影响"></a><strong>4.2. 微调对语言模型能力的影响</strong></h4><p>微调实验揭示了两个关键问题。</p><p>==<strong>首先，当使用专业数据集进行微调时，大型语言模型（LLMs）的专业能力会显著增强。</strong>==然而，专业能力的提高是以普通语言能力的逐渐下降为代价的。这种影响可归因于微调过程，在这个过程中，与特定领域知识相关的参数会被调整，而管理一般知识的参数也必须适应更新后的特定领域参数。因此，常识参数可能会偏离其预期功能，导致模型的整体通用性下降。这一发现与 Dong 等人（2023 年）的研究结果一致，他们强调了微调过程中专业语言能力和通用语言能力之间的对抗性互动，==证实了针对专业任务的微调可能会无意中阻碍模型更广泛的语言能力。==Wang 等人（2024 年）和 Tariq 等人（2024 年）也验证了微调对专门能力的有效性。此外，虽然 Llama、ChatGPT 和 ChatGLM 等模型的比较结果可能与我们的不同–可能是由于研究重点和实验设置的不同–但 Wang 等人（2023 年）强调了微调在农业技术知识问答应用中的有效性。</p><p>利用专业数据和通用数据的平衡组合对 LLM 进行微调，可以增强其特定领域的专业能力，同时保留通用语言能力。仅使用专用数据集进行微调往往会降低通用能力，因此需要采取策略，在不影响专用性的情况下恢复通用能力。虽然结合专业数据和通用数据进行微调似乎可以解决这个问题，但简单地合并数据集只能在专业化方面带来微不足道的收益，而且会削弱通用能力。==事实证明，两阶段微调方法–首先在专用数据集上进行微调，然后在混合数据集上进行微调–更为有效。==Cook 等人（2024 年）和 Dong 等人（2023 年）的研究结果证实，这种方法既能恢复一般能力，又能保留改进的专业化能力。同样，陈俊英等（2023 年）证明了在开发华佗 GPT-II 中药模型时，适当的微调顺序和数据组成的重要性。此外，Tinn 等人（2023 年）强调，微调策略（如冻结层）可以稳定基线模型，并改善特定领域应用的结果，这突出表明需要根据模型大小和目标定制特定任务的方法。此外，处方实验表明，CDIPChatGLM3 比其他模型提供了更好的具体可行建议。这进一步证实了微调过程的有效性，与定量指标比较结果一致。</p><p>同时，这也强调了有针对性的训练和专门数据集的重要性。相比之下，对比模型比 CDIP-ChatGLM3 提供了更全面、更扩展的反应，显示出更出色的通用语言能力。其中一个可能的原因是，CDIP-ChatGLM3 的模型规模相对较小，与参数数量更大、常识基础更广泛的 LLM 相比，通用语言能力较弱（赵等人，2023 年）。</p><p>因此，可以得出这样的结论：对混合专业知识和通用数据集的微调，以及在很大程度上取决于模型大小的固有语言能力，共同决定了最终的专业化性能。</p><h4 id="4-3-农作物病害诊断的识别与处方集成"><a href="#4-3-农作物病害诊断的识别与处方集成" class="headerlink" title="4.3. 农作物病害诊断的识别与处方集成"></a><strong>4.3. 农作物病害诊断的识别与处方集成</strong></h4><p>将用于病害识别的高效深度学习视觉模型与用于病害防控知识咨询的微调语言模型（即 CDIP-ChatGLM3）进行集成，为从业人员提供实用灵活的农作物保护工具。通过这种集成，可以快速准确地识别作物病害，并及时开出专业处方，还可以进行即时互动交流。与我们的研究类似，Qing 等人（2023 年）将识别模型 YOLOv8 与 GPT4 相结合，旨在解决准确分析农业病虫害图像并提供诊断报告的难题。然而，他们的研究只涉及两种作物和几种病害。此外，他们只是使用了通用的 GPT4，并没有使用足够的专业材料对其进行微调，导致 LLM 无法对特定作物病害做出专业反应。因此，他们的系统可能无法满足农民的实际使用要求。虽然通用多模态语言模型在通用任务中表现出了卓越的性能，并展示出了很高的通用性，但我们的对比实验表明，尽管模型规模大大增加，它们在作物疾病识别和处方等特定领域任务中的性能仍然不理想（表 6）。这一发现与 Kerdvibulvech（2025 年）的研究结果一致，后者认为==零镜头多模态语言模型在简单、一般的任务中表现出色，但在更复杂、特定领域的任务或训练样本有限的任务中表现不佳==。造成这种差异的原因可能是对通用训练数据的依赖，导致缺乏特定领域的示例。此外，为了提高它们在各种任务中的通用性，还需要进行权衡，从而影响了在特定领域任务中的表现。相比之下，CDIP-ChatGLM3 在专业知识数据集上进行了微调，在农作物疾病和处方任务中表现出了很高的性能。</p><p>此外，对于特定领域的多模态模型，Lu 等人（2024 年）在农业疾病检测和问题解答系统中使用了多模态变换器。尽管他们取得了很高的性能，但他们的研究涉及的作物和疾病相对有限，语料库可能不如我们的全面。相比之下，我们的 CDIP-ChatGLM3 基于广泛的作物和相应的疾病图像，并在全面的高质量语料库上进行了微调，不仅在疾病识别上，而且在防治处方上都取得了优异的性能。</p><p>Liu 等人（2025 年）也对另一个多模态模型进行了微调，以解决作物诊断问题，在疾病识别和问题解答方面都取得了很高的准确率。虽然他们在训练中使用了更多的图像，包括更多的作物和疾病（16 种作物，60 种疾病），但识别准确率却低于我们的研究，这可能是由于模态间信息融合的复杂性和训练多模态模型所需的海量数据所带来的挑战。相比之下，我们的研究在相对较小的数据集上分别对识别模型和语言模型进行了微调，然后将它们整合在一起，在识别准确率和准确反应方面都取得了优异的成绩。</p><p>虽然多模态模型在结合图像和文本数据方面已显示出前景，但==计算机视觉+ 微调 LLM 方法为作物病害识别和处方提供了更专业、可解释、可扩展和资源节约型的解决方案。==通过利用为每种模式定制的独立模型的优势，这种方法更适合现实世界中的农业应用，具有卓越的性能、灵活性和实用性。</p><h4 id="4-4-CDIP-ChatGLM3-的部署和潜在可用性评估"><a href="#4-4-CDIP-ChatGLM3-的部署和潜在可用性评估" class="headerlink" title="4.4. CDIP-ChatGLM3 的部署和潜在可用性评估"></a><strong>4.4. CDIP-ChatGLM3 的部署和潜在可用性评估</strong></h4><p>CDIP-ChatGLM3 与大多数多模态模型相比，具有最小的尺寸和较低的推理内存消耗，因此我们的模型比大多数多模态 LLM 所需的计算资源要少得多，从而提高了在消费级 GPU 上部署的可行性。具体来说，CDIP-ChatGLM3 在 FP16 精度下只需要约 13 GB 的 VRAM 进行推理，因此可以==在消费级 GPU 上运行，并为潜在的边缘或移动应用提供基于 API 的快速模型推理支持。==通过额外的量化（如 8 位或 4 位）或剪枝，该模型的内存占用可以减少到 6 GB、3 GB 或更低，从而扩大了能够承载该模型的设备范围。为了验证这一可行性，该模型被部署在一台配备了 P40 GPU 的服务器上，P40 GPU 拥有 20 GB 的 VRAM 和 32 GB 的系统内存。==CDIP-ChatGLM3 的硬件规格相对适中，低于大多数多模态 LLM 通常所需的硬件规格，在这种情况下，CDIP-ChatGLM3 表现出稳定的性能和较高的精度。==CDIP-ChatGLM3 可提供可操作的、针对特定领域的疾病预防建议，但必须不断收集和整合最终用户（如农民、农业推广人员和农学研究人员）的反馈，以便在实际农业条件下对模型进行客观、全面的评估。为了支持这一过程，我们开发了一个移动应用程序，可免费下载（<a href="https://www.united-smartag/">https://www.united-smartag</a>. com/team/#/servicedetail），从而方便了CDIP-ChatGLM3的实际使用。有了足够的用户数据，我们将进行系统的可用性评估，以全面界定模型的优势并确定需要改进的地方。</p><h4 id="4-5-局限性和未来工作"><a href="#4-5-局限性和未来工作" class="headerlink" title="4.5. 局限性和未来工作"></a><strong>4.5. 局限性和未来工作</strong></h4><p>尽管在病害识别准确率和提供防控建议方面取得了可喜的成果，但仍存在一些局限性。首先，虽然我们的叶病数据集包含 48 种疾病类型，但在面对数据集之外的场景或复杂的现实世界生产环境时，==<strong>可能会出现分类错误</strong>==。其次，由于所采用的大语言模型和所获取材料的局限性，在提供农户咨询的详细信息时，偶尔仍可能会出现一些错误或缺陷，从而导致农户认为信息不足。</p><p>最后，尽管双模型框架在疾病识别和处方方面都实现了高准确率和高效率，并有利于单个模型的升级和持续提供服务，**==但由于视觉和语言模式的独立运行，这两种模式之间的互动并未得到充分利用。==**</p><p>为了解决这些问题，未来的研究将集中在三个关键领域。通过将新收集的病叶图像纳入训练过程，视觉模型将不断更新，从而增强我们的识别模型。与此同时，大语言模型应利用与疾病防治相关的最新数据集不断进行微调和迭代，确保系统始终适应不断变化的生产环境。</p><p><strong>==<em>为解决两种模式之间的交互问题，将实施三项关键策略。</em>==</strong></p><p>首先，将引入一个视觉编码器来提取图像特征，然后将图像特征与输入语言模型的文本进行整合，从而提高模型的多模态信息利用能力。</p><p>其次，视觉模型和语言模型的耦合训练将取代目前的两步独立训练过程，如端到端协同训练。这一策略将共同优化视觉模型和语言模型，从而提高整体性能。</p><p>最后，将在视觉模型中加入注意力机制，以确定关键图像信息的优先级，从而使语言模型能够有效整合图像和文本数据以生成处方，而不是只关注识别结果的关键字。</p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划_背包问题</title>
      <link href="/archives/43cd3863.html"/>
      <url>/archives/43cd3863.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、0-1-背包"><a href="#一、0-1-背包" class="headerlink" title="一、0-1 背包"></a>一、0-1 背包</h3><h4 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1. 题目介绍"></a>1. 题目介绍</h4><hr><p><a href="https://www.acwing.com/problem/content/2/">01背包原题链接</a></p><p>有 <em><strong>N</strong></em> 件物品和一个容量是 <em><strong>V</strong></em> 的背包，每件物品有各自的价值且<u>只能被选择一次</u>，要求在有限地背包容量下，装入物品地总价值最大。</p><p>[0-1背包] 是较为简单的动态规划问题，也是其余背包问题的基础。</p><p>动态规划是不断决策求最优解的过程，[0-1背包]就是不断地对第 <em>i</em>  个 物品进行决策，[0-1] 就代表选与不选两种决定。</p><h4 id="2-题解代码"><a href="#2-题解代码" class="headerlink" title="2. 题解代码"></a>2. 题解代码</h4><hr><p>2.1  二维数组版本</p><p>(1) 状态 <code>f[i][j]</code> 定义：<strong>前 <em>i</em> 个 物品，背包容量 <em>j</em> 下的最大价值</strong></p><ul><li>当前状态依赖于之前的状态，可以理解为从初始状态<code>f[0][0] = 0</code>开始决策，有 N 件物品，需要进行 N 次决策，每一次对第 i 件物品的决策，状态 <code>f[i][j]</code> 不断由之前的状态更新而来。</li></ul><p>(2) 决策选与不选第i个物品：</p><ul><li>选：<code>f[i][j] = f[i - 1][j - v[i]] + w[i]</code></li><li>不选：<code>f[i][j] = f[i - 1][j]</code></li><li>如何决策，取两种情况的最大价值，即<code>max()</code></li></ul><p>代码如下:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;const int N = 1010;int n,m;int v[N],w[N];int f[N][N];int main(){    cin &gt;&gt; n &gt;&gt; m;    for(int i = 1;i &lt;= n;i++) cin &gt;&gt; v[i] &gt;&gt; w[i];        for(int i = 1;i &lt;= n;i++){        for(int j = 1;j &lt;= m;j++){            f[i][j] = f[i - 1][j]; //不选第i件物品            //选第i件物品 并且进行决策            if(j &gt;= v[i]) f[i][j] = max(f[i][j],f[i - 1][j - v[i]] + w[i]);        }    }        cout &lt;&lt; f[n][m] &lt;&lt; endl;        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 一维数组版本</p><p>将状态<code>f[i][j]</code> 优化到一维 <code>f[j]</code> ，实际上只需要做一个<strong>等价变形</strong></p><p>理由： 我们定义的状态<code>f[i][j]</code> 可以求得任意合法的<code>i</code> 和 <code>j</code>最优解，但是题目只要求最终状态<code>f[n][m]</code>，因此只需要用一维的空间来更新状态。</p><p>（1）状态<code>f[j]</code>定义： N 件物品，背包容量<code>j</code>下的最优解。</p><p>（2）一维情况下枚举背包容量<strong>需要逆序</strong>，如果正序，则需要一个辅助数组来保留上一层更新后的状态。</p><p>逆序理由：在二维情况下，状态 <code>f[i][j]</code>是由上一轮 <code>i-1</code> 的状态得到的，<code>f[i][j]</code>与 <code>f[i-1][j]</code>是相互独立的。当优化到一维后，如果还是正序，则有<code>f[较小体积] </code>更新 <code>f[较大体积]</code> ，即有可能本应该用第 <code>i - 1 </code>的状态缺用的是第 <code>i </code>轮的状态。</p><p>正序的情况：</p><p><strong><img src="/archives/43cd3863/%E6%AD%A3%E5%BA%8F%E6%83%85%E5%86%B5.png" class=""></strong></p><p>逆序的情况：</p><p><strong><img src="/archives/43cd3863/%E9%80%86%E5%BA%8F%E6%83%85%E5%86%B5.png" class=""></strong></p><p>（3） 通俗来说，一维情况下正序更新状态<code>f[j]</code>需要用到前面计算的状态已经被【污染】，逆序则不会有这样的问题。</p><p>（4） 关于状态<code>f[j]</code>的补充说明</p><p>​二维下的状态定义 <code>f[i][j]</code>是 前 i  件物品，背包容量 j 的最大价值。一维下，少了前 i 件物品这个维度，代码中决策到第 i  件物品（循环到第 i 轮），<code>f[j]</code>就是前<code>i</code>轮已经决策的物品且背包容量 j 下的最大价值。</p><p>​因此当执行完循环结构后，由于已经决策了所有物品，<code>f[j]</code>就是所有物品背包容量 j  下的最大价值。</p><p>即 一维 <code>f[j]</code> 等价于 二维 <code>f[n][j]</code></p><p>代码如下:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N = 1010;int w[N],v[N];int f[N];int main(){    int n,m;    cin &gt;&gt; n &gt;&gt; m;    for(int i = 1;i &lt;= n;i++) cin &gt;&gt; v[i] &gt;&gt; w[i];    for(int i = 1;i &lt;= n;i++){        for(int j = m;j &gt;= v[i];j--){ //逆序            f[j] = max(f[j],f[j-v[i]] + w[i]);        }    }    cout &lt;&lt; f[m] &lt;&lt; endl;        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、完全背包"><a href="#二、完全背包" class="headerlink" title="二、完全背包"></a>二、完全背包</h3><h4 id="1-题目介绍-1"><a href="#1-题目介绍-1" class="headerlink" title="1. 题目介绍"></a>1. 题目介绍</h4><hr><p>有 <em><strong>N</strong></em> 件物品和一个容量是 <em><strong>V</strong></em> 的背包，每件物品有各自的价值且<u>可以无限选择</u>，要求在有限地背包容量下，装入物品地总价值最大。</p><p><a href="https://www.acwing.com/problem/content/3/">完全背包原题链接</a></p><h4 id="2-闫式DP分析"><a href="#2-闫式DP分析" class="headerlink" title="2. 闫式DP分析"></a>2. 闫式DP分析</h4><p><strong><img src="/archives/43cd3863/%E9%97%AB%E5%BC%8FDP_%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85.png" class=""></strong></p><h4 id="3-题解代码"><a href="#3-题解代码" class="headerlink" title="3. 题解代码"></a>3. 题解代码</h4><h5 id="三重循环版本"><a href="#三重循环版本" class="headerlink" title="三重循环版本"></a>三重循环版本</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;const int N = 1010;int v[N],w[N];int f[N][N];int n,m;int main(){    //朴素做法    cin &gt;&gt; n &gt;&gt; m;    for(int i = 1;i &lt;= n;i++) cin &gt;&gt; v[i] &gt;&gt; w[i];    for(int i = 1;i &lt;= n;i++)        for(int j = 1;j &lt;= m;j++){            f[i][j] = f[i - 1][j];            if(j &gt;= v[i]) f[i][j] = max(f[i][j],f[i][j - v[i]] + w[i]);        }    cout &lt;&lt; f[n][m] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该版本因为是三重循环，由于N是10 ^ 3级，故时间复杂度可能会到10 ^ 9级，会超时，出现TLE错误，故需要对其优化。</p><h5 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h5><p>更新次序的内部关系为：</p><pre class="line-numbers language-none"><code class="language-none">f[i , j ] = max( f[i-1,j] , f[i-1,j-v]+w ,  f[i-1,j-2*v]+2*w , f[i-1,j-3*v]+3*w , .....)f[i , j-v]= max(            f[i-1,j-v]   ,  f[i-1,j-2*v] + w , f[i-1,j-3*v]+2*w , .....)由上两式，可得出如下递推关系：                         f[i][j]=max( f[i-1][j] ,  f[i,j-v]+w ) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因此k循环可以舍弃，核心代码可以优化为:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i = 1;i &lt;= n;i++)    for(int j = 1;j &lt;= m;j++){        f[i][j] = f[i - 1][j];        if(j &gt;= v[i]) f[i][j] = max(f[i][j],f[i][j - v[i]] + w[i]);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与01背包的优化类似，可以将其优化到一维数组，可以降低空间复杂度:</p><p>两者代码对比：</p><p><code>f[i][j] = max(f[i][j],f[i - 1][j - v[i]] + w[i]); // 01背包</code></p><p><code>f[i][j] = max(f[i][j],f[i][j - v[i]] + w[i]); //完全背包</code></p><p><code>但与01背包不同的在于j是从小到大进行枚举，与01背包相反</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i = 1;i &lt;= n;i++)       for(int j = v[i];j &lt;= m;j++){             // f[j] = f[j];           //f[i][j] = f[i-1][j]           //当前就是第i层 f[i-1][j] 是上一层已经算过的值           f[j] = max(f[j],f[j - v[i]] + w[i]);           //             f[i][j] = max(f[i][j], f[i][j-v[i]] + w[i])           //                              j-v[i] 是当前i层中已经算过的 所以是f[i][j-v[i]]            }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>综上所述，优化后的完全背包的最终写法为:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N = 1010;int n,m;int v[N],w[N];int f[N];//f[j] 所有从前i件物品中选，总体积不超过j的集合方案数量int main(){    cin &gt;&gt; n &gt;&gt; m;    for(int i = 1;i &lt;= n;i++) cin &gt;&gt; v[i] &gt;&gt; w[i];        for(int i = 1;i &lt;= n;i++)        for(int j = v[i];j &lt;= m;j++)            f[j] = max(f[j],f[j - v[i]] + w[i]);        cout &lt;&lt; f[m] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、多重背包问题"><a href="#三、多重背包问题" class="headerlink" title="三、多重背包问题"></a>三、多重背包问题</h3>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二讲_数据结构</title>
      <link href="/archives/ae01c867.html"/>
      <url>/archives/ae01c867.html</url>
      
        <content type="html"><![CDATA[<h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><details class="lake-collapse"><summary id="uefc7dee6"><span class="ne-text">单链表</span></summary><ol class="ne-ol"><li id="u7fbfa255" data-lake-index-type="0"><span class="ne-text">在算法比赛中，单链表常使用静态链表来存储，而不用传统的结构体，这是因为new的底层涉及内存分配，调用构造函数，指针转换等多种复杂且费时的操作。但是在算法比赛中，经常碰到操作在10w级别的链表操作，如果使用结构体这种操作，是无法在算法规定时间完成的。所以，在算法比赛这种有严格的时间要求的环境中，不能频繁使用new操作，也就不能使用结构体来实现数组。</span></li><li id="u96346b03" data-lake-index-type="0"><span class="ne-text">详细内容详见下方链接：</span></li></ol><p id="u29e272af" class="ne-p"><a href="https://www.acwing.com/file_system/file/content/whole/index/content/4008335/" data-href="https://www.acwing.com/file_system/file/content/whole/index/content/4008335/" target="_blank" class="ne-link"><span class="ne-text">https://www.acwing.com/file_system/file/content/whole/index/content/4008335/</span></a></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add_to_head</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">,</span> head <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ne<span class="token punctuation">[</span>ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> op<span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span> x<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> op<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token char">'H'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            <span class="token function">add_to_head</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token char">'D'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span> head <span class="token operator">=</span> ne<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">remove</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第k个元素对应的索引为k - 1</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> k <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第k个元素对应的索引为k - 1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><details class="lake-collapse"><summary id="u307fc727"><span class="ne-text">双链表</span></summary><p id="uc7b1937d" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1721140215896-8033d30f-67ab-43d7-b4cb-f8245105717b.png" width="872" id="u3645f0e6" class="ne-image"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1721140216150-b26c0c9f-b438-4296-881a-3bd54f7e4b88.png" width="1001" id="u12bd5450" class="ne-image"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1721140216295-b3dc6b54-b233-4a62-aed8-8b1beea14ed9.png" width="901" id="u3a96164e" class="ne-image"></p><p id="u8e669cd4" class="ne-p"><span class="ne-text">详细链接:</span></p><p id="u7b7335aa" class="ne-p"><a href="https://www.acwing.com/file_system/file/content/whole/index/content/125191/" data-href="https://www.acwing.com/file_system/file/content/whole/index/content/125191/" target="_blank" class="ne-link"><span class="ne-text">https://www.acwing.com/file_system/file/content/whole/index/content/125191/</span></a></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> idx<span class="token punctuation">;</span><span class="token comment">//! 初始化</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//* 初始化 第一个点的右边是 1   第二个点的左边是 0</span>    idx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//! idx 此时已经用掉两个点了</span><span class="token punctuation">}</span><span class="token comment">//* 在第 K 个点右边插入一个 X </span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    l<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>    r<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//todo 这边的 k 不加 1 ， 输入的时候 k+1 就好</span>    l<span class="token punctuation">[</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>    r<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>    idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//! 当然在 K 的左边插入一个数 可以再写一个 ， 也可以直接调用我们这个函数，在 k 的左边插入一个 数 等价于在 l[k] 的右边插入一个数 add(l[k],x)</span><span class="token comment">//*删除第 k个 点</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    r<span class="token punctuation">[</span>l<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string op<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> op<span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span> x<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">"R"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//!   0和 1 只是代表 头和尾  所以   最右边插入 只要在  指向 1的 那个点的右边插入就可以了</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token comment">//! 同理  最左边插入就是 在指向 0的数的右边插入就可以了   也就是可以直接在 0的 有右边插入</span>        <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">"D"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>            <span class="token function">remove</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">"IL"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> k <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> k <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><details class="lake-collapse"><summary id="ua70b59cf"><span class="ne-text">栈</span></summary><p id="u0d085ab4" class="ne-p"><span class="ne-text">数组模拟栈：</span></p><p id="uafa7b767" class="ne-p"><span class="ne-text">用top表示栈顶所在的索引。初始时，top = -1。表示没有元素。</span></p><p id="u1e6d0897" class="ne-p"><span class="ne-text">push x ：栈顶所在索引往后移动一格，然后放入x。st[++top] = x。</span></p><p id="u4d39cb96" class="ne-p"><span class="ne-text">pop : top 往前移动一格。top–。</span></p><p id="u58905349" class="ne-p"><span class="ne-text">empty ：top 大于等于 0 栈非空，小于 0 栈空。top == -1 ? “YES” : “NO”</span></p><p id="ucee047ae" class="ne-p"><span class="ne-text">query ： 返回栈顶元素。st[top]</span></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string op<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>op<span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">"push"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            st<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">"pop"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">"empty"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"YES"</span> <span class="token operator">:</span> <span class="token string">"NO"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> stack<span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    string op<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> op<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">"push"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">"pop"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">"empty"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">"query"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> stack<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><details class="lake-collapse"><summary id="ua68490e8"><span class="ne-text">队列</span></summary><p id="u6e22a1c3" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1721186366435-b177ff97-f51b-4422-8880-c3411e71e959.png" width="649.6" id="u86d4e844" class="ne-image"></p><p id="u5f58a2f6" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1721186386996-f398257f-9d4a-4cf2-ac47-1f1c58b4535e.png" width="704" id="u586e2d46" class="ne-image"></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//[hh, tt] 之间为队列（左闭右闭）</span><span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//队头位置</span><span class="token keyword">int</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//队尾位置</span><span class="token comment">//操作次数</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token comment">//操作方式</span>string s<span class="token punctuation">;</span><span class="token comment">//入队：队尾先往后移动一格，再放入要插入的数据</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//出队：队头往后移动一格</span><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    hh<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//[hh, tt]表示队列区间，当tt &gt;= hh时，区间不为空</span><span class="token keyword">void</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tt <span class="token operator">&gt;=</span> hh<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//hh指向队头，q[hh]代表队头元素</span><span class="token keyword">void</span> <span class="token function">query</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>        <span class="token comment">//入队</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"push"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            <span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//出队</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"pop"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//问空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"empty"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//问队头</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h4><details class="lake-collapse"><summary id="u69246651"><span class="ne-text">单调栈</span></summary><p id="uc4353225" class="ne-p"><span class="ne-text">单调栈就是使栈内元素单调递增或者单调递减的栈，单调栈也只能在栈顶操作</span></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> tt<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tt <span class="token operator">&amp;&amp;</span> stk<span class="token punctuation">[</span>tt<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> tt <span class="token operator">--</span> <span class="token punctuation">;</span><span class="token comment">//如果栈顶元素大于当前待入栈元素，则出栈</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tt<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果栈空，则没有比该元素小的值。</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> stk<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//栈顶元素就是左侧第一个比它小的元素。</span>        stk<span class="token punctuation">[</span> <span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h4><details class="lake-collapse"><summary id="uaf9aa976"><span class="ne-text">单调队列</span></summary><ol class="ne-ol"><li id="u7e793f2f" data-lake-index-type="0"><span class="ne-text">单调队列和单调栈的习题思路：</span></li></ol><p id="uba866da3" class="ne-p"><span class="ne-text">① 先用栈或者队列模拟朴素求解 ② 将所有没有用的元素删去 ③ 观察剩下的元素是否存在单调性（若是最值问题，返回两端点；若是查找问题，那就二分求解）</span></p><ol start="2" class="ne-ol"><li id="uc2123936" data-lake-index-type="0"><span class="ne-text">单调队列的典型问题就是滑动窗口求最值问题：</span></li></ol><p id="ue6065567" class="ne-p"><a href="https://www.acwing.com/file_system/file/content/whole/index/content/4139707/" data-href="https://www.acwing.com/file_system/file/content/whole/index/content/4139707/" target="_blank" class="ne-link"><span class="ne-text">https://www.acwing.com/file_system/file/content/whole/index/content/4139707/</span></a></p><p id="ud2f3b07b" class="ne-p"><span class="ne-text">以上链接是求滑动窗口问题的解析</span></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//单调队列 解决滑动窗口最大最小值</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token comment">//a用来存储元素 q是队列</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//找最大值</span>    <span class="token comment">//队列中的下标值都是逐渐递增的，而且下标对应的元素值是逐渐递减的</span>    <span class="token comment">//队头元素就是窗口最大值</span>    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断队头是否滑出了窗口 ，队头出队</span>        <span class="token comment">//i-k+1 就是窗口左侧的位置 窗口(i-k+1 ~ i)</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">)</span> hh<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">//新进入窗口的元素大于等于队尾元素，队尾出队</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> tt<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token comment">//将新进入的元素入队</span>        q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token comment">//当窗口形成，输出队头对应的值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//找最小值</span>    <span class="token comment">//队列中的下标值都是逐渐递增的，而且下标值对应的元素值也是逐渐递增的</span>    <span class="token comment">//队头元素就是窗口最小值</span>    hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">)</span> hh<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> tt<span class="token operator">--</span><span class="token punctuation">;</span>        q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h4><details class="lake-collapse"><summary id="u34f88d16"><span class="ne-text">kmp重点</span></summary><ol class="ne-ol"><li id="u72dc99ba" data-lake-index-type="0"><span class="ne-text">next[i] 存储的就是使子串 s[0…i] 有最长相等前后缀的前缀的最后一位的下标。</span></li><li id="uf1d3458d" data-lake-index-type="0"><span class="ne-text">时间复杂度: 0(N+M）</span></li><li id="u8d8d3c1d" data-lake-index-type="0"><span class="ne-text">两个参考：</span></li></ol><p id="u4e7993fd" class="ne-p"><a href="https://www.acwing.com/file_system/file/content/whole/index/content/6255932/" data-href="https://www.acwing.com/file_system/file/content/whole/index/content/6255932/" target="_blank" class="ne-link"><span class="ne-text">https://www.acwing.com/file_system/file/content/whole/index/content/6255932/</span></a></p><p id="u7fb53ddd" class="ne-p"><a href="https://www.acwing.com/file_system/file/content/whole/index/content/584374/" data-href="https://www.acwing.com/file_system/file/content/whole/index/content/584374/" target="_blank" class="ne-link"><span class="ne-text">https://www.acwing.com/file_system/file/content/whole/index/content/584374/</span></a></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//用p来匹配s</span><span class="token keyword">int</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// “next” 数组，若第 i 位存储值为 k</span><span class="token comment">// 说明 p[1...i] 内最长相等前后缀的前缀的最后一位下标为 k</span><span class="token comment">// 即 p[1...k] == p[i-k+1...i]</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//从1开始存储</span>        <span class="token comment">//求next数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//next[1]恒等于0</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token comment">// 若前后缀匹配不成功</span>            <span class="token comment">// 反复令 j 回退，直至到 -1 或是 s[i] == s[j + 1]</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 匹配成功时，最长相等前后缀变长，最长相等前后缀前缀的最后一位变大</span>        ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">//记录</span>    <span class="token punctuation">}</span>        <span class="token comment">//匹配</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 模板串在模式串中出现的位置可能是重叠的</span>           <span class="token comment">// 需要让 j 回退到一定位置，再让 i 加 1 继续进行比较</span>           <span class="token comment">// 回退到 ne[j] 可以保证 j 最大，即已经成功匹配的部分最</span>            j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h4><details class="lake-collapse"><summary id="ud9a8a927"><span class="ne-text">Trie</span></summary><ol class="ne-ol"><li id="u5e9b4033" data-lake-index-type="0"><span class="ne-text">Trie树又称字典树、单词查找树，是一种能够</span><span class="ne-text" style="background-color: #FBDE28">高效存储和查找字符串集合</span><span class="ne-text">的数据结构。</span></li><li id="u93c0437b" data-lake-index-type="0"><span class="ne-text">字典树主要支持两种操作，一是插入，二是查询，无论是插入还是查询基本思路都是对该字符串的每个字母进行枚举，判断当前前缀为p时，当前这个节点是否存在，若是不存在进行分配，并将前缀移动到当前节点。</span></li><li id="ubc4f4f4d" data-lake-index-type="0"><span class="ne-text">字典树实际上就是通过利用不同字符串前缀相同的特点，来对字符串进行高效存储和查找的一种数据结构。使用一个二维数组进行存储，第一维用来区分不同的前缀，第二维表示方向（26个字母总共有26个方向）。</span></li><li id="u7bdf749e" data-lake-index-type="0"><span class="ne-text" style="background-color: #FBDE28">idx指的是已经用到哪个下标，也就是树的节点编号，用于区分每个结点；</span></li><li id="u53863976" data-lake-index-type="0"><span class="ne-text" style="background-color: #FBDE28">cnt 指有多少字符串在当前节点结尾</span></li></ol><p id="uaca9ae05" class="ne-p"><span class="ne-text">详细内容见链接：</span></p><p id="ua7247f29" class="ne-p"><a href="https://www.acwing.com/file_system/file/content/whole/index/content/585887/" data-href="https://www.acwing.com/file_system/file/content/whole/index/content/585887/" target="_blank" class="ne-link"><span class="ne-text">https://www.acwing.com/file_system/file/content/whole/index/content/585887/</span></a></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Trie树快速存储字符集合和快速查询字符集合</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token comment">//son[][]存储子节点的位置，分支最多26条；</span><span class="token comment">//cnt[]存储以某节点结尾的字符串个数（同时也起标记作用）</span><span class="token comment">//idx表示当前要插入的节点是第几个,每创建一个节点值+1</span><span class="token keyword">int</span> son<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//类似指针，指向当前节点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span> <span class="token comment">//将字母转化为数字</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>idx<span class="token punctuation">;</span>   <span class="token comment">//该节点不存在，创建节点</span>        p <span class="token operator">=</span> son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//使“p指针”指向下一个节点</span>    <span class="token punctuation">}</span>    cnt<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//结束时的标记，也是记录以此节点结束的字符串个数</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//该节点不存在，即该字符串不存在</span>        p <span class="token operator">=</span> son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//返回字符串出现的次数</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%s"</span><span class="token punctuation">,</span> op<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>op <span class="token operator">==</span> <span class="token char">'I'</span><span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><details class="lake-collapse"><summary id="ua00eec46"><span class="ne-text">并查集</span></summary><ol class="ne-ol"><li id="u737ac2bb" data-lake-index-type="0"><span class="ne-text">并查集是一种树型的数据结构，用于处理一些不相交集合（disjointsets）的合并及查询问题。</span></li><li id="u998e0f32" data-lake-index-type="0"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1722496570927-6da68f87-65db-4fe3-8251-696ca69fdc17.png" width="927.2727272727273" id="u64eb1e5e" class="ne-image"></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义多个集合</span><span class="token comment">//find()函数不仅实现查找祖宗节点的操作，同时还进行了路径压缩</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*    经上述可以发现,每个集合中只有祖宗节点的p[x]值等于他自己,即:    p[x]=x;    */</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//找到了便返回祖宗节点的值</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d%d"</span><span class="token punctuation">,</span>op<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>op<span class="token operator">==</span><span class="token char">'M'</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//集合合并操作</span>        <span class="token keyword">else</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">40010</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span> <span class="token comment">// a,b代表输入的坐标</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span> <span class="token comment">//x代表转化为一维的坐标，y代表向右或者向下的坐标</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    p<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//初始化</span>    <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// i用来遍历 ，同时用来标记第几步完成</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//二维数组存到一维</span>        x  <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>op <span class="token operator">==</span> <span class="token char">'D'</span><span class="token punctuation">)</span> y <span class="token operator">=</span> a <span class="token operator">*</span> n <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">else</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//判断x,y是否在同一集合</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">merge</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"draw"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token comment">//nums用来维护对应集合的元素个数</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x <span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    nums<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//维护集合数量</span>    p<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//初始化每个集合</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string s<span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"Q1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><details class="lake-collapse"><summary id="ua96abbbd"><span class="ne-text">堆排序</span></summary><ol class="ne-ol"><li id="uc20df039" data-lake-index-type="0"><span class="ne-text">堆的性质</span></li></ol><p id="udc4a2926" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1722496992127-e092a3e2-71e1-4dc3-9f2b-bb8f07f9066f.png" width="1079.2727272727273" id="ucbe26d6a" class="ne-image"></p><ol start="2" class="ne-ol"><li id="u674df072" data-lake-index-type="0"><span class="ne-text">对于小根堆来说，up操作就是该位置的数太小，需要和父亲节点比较交换，down操作就是该位置的数太大，需要向下调整，也即为和左右孩子中较小的进行交换，从而实现小根堆的调整。</span></li><li id="ua6700c8a" data-lake-index-type="0"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1722497539438-f10be1f5-d462-465b-afdc-84ffea2aaac2.png" width="845.8181818181819" id="ud067223e" class="ne-image"></li><li id="u0a1400c8" data-lake-index-type="0"></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token comment">//h[]是堆  sized维护堆中元素数量</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>sized<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> u <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//父节点存在且父节点的值比当前节点大 =&gt; 交换</span>        <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>u<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> u<span class="token punctuation">;</span> <span class="token comment">//t记录当前节点及左右节点中最小的节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> sized <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> u <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//左孩子节点存在且左孩子的值比当前节点小</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> sized <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">down</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//递归</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    sized <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//O(n)时间复杂度 建堆</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">down</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>sized<span class="token punctuation">]</span><span class="token punctuation">;</span>        sized <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">down</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//输入需要操作的次数</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>ph<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>hp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token comment">//h代表heap（堆），ph（point-&gt;heap）可以获得第几个插入的元素现在在堆的那个位置</span><span class="token comment">//hp(heap-&gt;point)可以获得在堆的第n个元素存的是第几个插入的元素</span><span class="token keyword">void</span> <span class="token function">heap_swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//交换在heap中位置分别为a，b的两个元素</span>    <span class="token function">swap</span><span class="token punctuation">(</span>ph<span class="token punctuation">[</span>hp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ph<span class="token punctuation">[</span>hp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据a和b的位置找到它们分别是第几个插入的元素，然后将其（在h数组中的）下标转换</span>    <span class="token function">swap</span><span class="token punctuation">(</span>hp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>hp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将两个位置存的是第几号元素转换</span>    <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后再转换值(这三个语句位置可以换，但是从上到下逐渐变短的话比较美观)</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前堆的元素下沉</span>    <span class="token keyword">int</span> t<span class="token operator">=</span>u<span class="token punctuation">;</span><span class="token comment">//让t代指u以及其两个儿子（三个点）中的最大值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">*</span><span class="token number">2</span><span class="token operator">&lt;=</span>cnt <span class="token operator">and</span> h<span class="token punctuation">[</span>u<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>t<span class="token operator">=</span>u<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span>cnt <span class="token operator">and</span> h<span class="token punctuation">[</span>u<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>t<span class="token operator">=</span>u<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//注意此处为d[t]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">!=</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//最小值不是t，那么下沉，并且继续down操作</span>        <span class="token function">heap_swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">down</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>u<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">and</span> h<span class="token punctuation">[</span>u<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//第一个u/2是防止当u冲到顶然后陷入死循环</span>        <span class="token function">heap_swap</span><span class="token punctuation">(</span>u<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        u<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string op<span class="token punctuation">;</span><span class="token comment">//option(选项)的缩写</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span>x<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>op<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//insert（插入）的缩写</span>            cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">,</span>m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//初始化</span>            ph<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span><span class="token comment">//m代表是第几个插入的元素(point)-&gt;cnt指向的是插入的位置(heap)</span>            hp<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">;</span><span class="token comment">//原理同上</span>            h<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//这里忘记写了，WA一次</span>            <span class="token function">up</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">"PM"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//Print Min 打印最小</span>            cout<span class="token operator">&lt;&lt;</span>h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">"DM"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">heap_swap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将底部一个元素放上来</span>            cnt<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//所有元素数量减一</span>            <span class="token function">down</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将放上来的元素沉下去</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span><span class="token comment">//k存储拿到第几个输入的数字</span>            k<span class="token operator">=</span>ph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//k从储存第几个输入的数字变换为储存那个数字存放在h的哪个位置</span>            <span class="token function">heap_swap</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将底部一个元素放上来</span>            cnt<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//所有元素数量减一</span>            <span class="token function">down</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//其可能大，可能小，都操作一遍准没错</span>            <span class="token function">up</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//剩下来还没有操作的就是C（change）了，不必多谢一个if判断</span>            cin<span class="token operator">&gt;&gt;</span>k<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>            k<span class="token operator">=</span>ph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//k从储存第几个输入的数字变换为储存那个数字存放在h的哪个位置</span>            h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里又忘记写了，WA两次</span>            <span class="token function">up</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token comment">//hp用来存储堆到下标的映射  ph用来存储下标到堆的映射</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>hp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>ph<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">heap_swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>hp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>hp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>ph<span class="token punctuation">[</span>hp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ph<span class="token punctuation">[</span>hp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>u <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">heap_swap</span><span class="token punctuation">(</span>u<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        u <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t  <span class="token operator">=</span> u<span class="token punctuation">;</span>    <span class="token comment">//注意这里是h[u*2] &lt; h[t] 而不是 h[u*2] &lt; h[u]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> cnt <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> u <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> cnt <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">heap_swap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">down</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string s<span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span>x<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            cnt <span class="token operator">++</span> <span class="token punctuation">,</span>m<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//m唯一标识（下标）</span>            ph<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">,</span>hp<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>            h<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"PM"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"DM"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">heap_swap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>            k <span class="token operator">=</span> ph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token function">heap_swap</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> k <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            k <span class="token operator">=</span> ph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h4><details class="lake-collapse"><summary id="u265825f7"><span class="ne-text">字符串哈希总结</span></summary><p id="u8942812c" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1722567292275-c15d48d5-d16c-49ac-9045-1c28edd66949.png" width="630.5454545454545" id="ucae56b1e" class="ne-image"></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//P通常为131 或者13331 不会出现冲突</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">,</span>P <span class="token operator">=</span> <span class="token number">131</span><span class="token punctuation">;</span><span class="token comment">//unsigned long long 类型溢出后相当于对 2^64 取模，省略了手动运算</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ULL<span class="token punctuation">;</span><span class="token comment">//h[] 来存储字符串前缀哈希值总和 p[]理解成 单纯表示P的次方 恰好和字符串的位数相等</span>ULL h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token comment">//获取l,r之间的字符串的哈希值</span>ULL <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> h<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构建h[]和p[]</span>    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> P <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> P<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l1<span class="token punctuation">,</span>r1<span class="token punctuation">,</span>l2<span class="token punctuation">,</span>r2<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l1<span class="token punctuation">,</span><span class="token operator">&amp;</span>r1<span class="token punctuation">,</span><span class="token operator">&amp;</span>l2<span class="token punctuation">,</span><span class="token operator">&amp;</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">get</span><span class="token punctuation">(</span>l2<span class="token punctuation">,</span>r2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模拟散列表"><a href="#模拟散列表" class="headerlink" title="模拟散列表"></a>模拟散列表</h4><details class="lake-collapse"><summary id="ufba7d99d"><span class="ne-text">散列表</span></summary><ol class="ne-ol"><li id="u26bdaab9" data-lake-index-type="0"><span class="ne-text">散列表也就是哈希表，通常实现两种功能：</span><em><span class="ne-text" style="background-color: #74B602">insert</span></em><span class="ne-text">和</span><em><span class="ne-text" style="background-color: #74B602">find</span></em><span class="ne-text">，全是O(1)的时间复杂度。</span></li><li id="uf3dca809" data-lake-index-type="0"><span class="ne-text">对于散列表的存储结构来说，有两种方法，即 </span><span class="ne-text" style="text-decoration: underline; background-color: #FBDE28">开放地址法</span><span class="ne-text"> 和 </span><span class="ne-text" style="text-decoration: underline; background-color: #FBDE28">拉链法</span><span class="ne-text">，无论哪种方法，还是都会用到哈希函数，其中那个值通常取质数，这样可以减少冲突次数，对于拉链法，若是发生冲突，则会在映射位置拉起链表，利用数组+链表的方式存储，当然我们这里还是运用本节的静态链表构建方式；而对于开放寻址法，数组通常需要扩充到N的2-3倍，其实通俗的来说，就是蹲坑法，当使用哈希函数后得到哈希值，如果该位置已经被占用，那么就继续向下一个位置查询即可。</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100003</span><span class="token punctuation">;</span><span class="token keyword">int</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">,</span>h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//h[N]哈希 (将x映射到 0 ~ N- 1)</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//映射 x可能为负数</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span> x <span class="token operator">%</span> N <span class="token operator">+</span> N <span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>    idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span> x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//拉链法</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        <span class="token comment">//将h[]中的数据全部初始化为-1</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>op <span class="token operator">==</span> <span class="token char">'I'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            <span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//在某些算法中，特别是涉及图论和动态规划的问题时，0x3f3f3f3f 常被用作“无穷大”的替代值。</span><span class="token comment">//因为 0x3f3f3f3f 大于大多数实际可能的距离或成本值，可以安全地用作初始值，以简化比较操作。</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200003</span><span class="token punctuation">,</span>null <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//映射的位置有元素，且该元素不是x 时 ，要向下一个位置寻找</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">//当k到头时，回来重新找，反正肯定够放，扩容了2倍</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> N<span class="token punctuation">)</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//先初始化</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d"</span><span class="token punctuation">,</span>op<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>op <span class="token operator">==</span> <span class="token char">'I'</span><span class="token punctuation">)</span> h<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c-中的STL"><a href="#c-中的STL" class="headerlink" title="c++中的STL"></a>c++中的STL</h4><details class="lake-collapse"><summary id="u3b894f12"><span class="ne-text">STL简介</span></summary><p id="u1e725859" class="ne-p"><span class="ne-text">C++ STL简介<br></span><span class="ne-text">1. vector, 变长数组，倍增的思想<br></span><span class="ne-text">    size()  返回元素个数<br></span><span class="ne-text">    empty()  返回是否为空<br></span><span class="ne-text">    clear()  清空<br></span><span class="ne-text">    front()/back()<br></span><span class="ne-text">    push_back()/pop_back()<br></span><span class="ne-text">    begin()/end()<br></span><span class="ne-text">    []<br></span><span class="ne-text">    支持比较运算，按字典序</span></p><ol start="2" class="ne-ol"><li id="u36be90ca" data-lake-index-type="0"><span class="ne-text">pair&lt;int, int&gt;<br></span><span class="ne-text">    first, 第一个元素<br></span><span class="ne-text">    second, 第二个元素<br></span><span class="ne-text">    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）</span></li><li id="u0ab92a51" data-lake-index-type="0"><span class="ne-text">string，字符串<br></span><span class="ne-text">    size()/length()  返回字符串长度<br></span><span class="ne-text">    empty()<br></span><span class="ne-text">    clear()<br></span><span class="ne-text">    substr(起始下标，(子串长度))  返回子串<br></span><span class="ne-text">    c_str()  返回字符串所在字符数组的起始地址</span></li><li id="u2368c162" data-lake-index-type="0"><span class="ne-text">queue, 队列<br></span><span class="ne-text">    size()<br></span><span class="ne-text">    empty()<br></span><span class="ne-text">    push()  向队尾插入一个元素<br></span><span class="ne-text">    front()  返回队头元素<br></span><span class="ne-text">    back()  返回队尾元素<br></span><span class="ne-text">    pop()  弹出队头元素</span></li><li id="u90c92ec4" data-lake-index-type="0"><span class="ne-text">priority_queue, 优先队列，默认是大根堆<br></span><span class="ne-text">    push()  插入一个元素<br></span><span class="ne-text">    top()  返回堆顶元素<br></span><span class="ne-text">    pop()  弹出堆顶元素<br></span><span class="ne-text">    定义成小根堆的方式：priority_queue&lt;int, vector, greater&gt; q;</span></li><li id="u5f2ea2c4" data-lake-index-type="0"><span class="ne-text">stack, 栈<br></span><span class="ne-text">    size()<br></span><span class="ne-text">    empty()<br></span><span class="ne-text">    push()  向栈顶插入一个元素<br></span><span class="ne-text">    top()  返回栈顶元素<br></span><span class="ne-text">    pop()  弹出栈顶元素</span></li><li id="u1855a70f" data-lake-index-type="0"><span class="ne-text">deque, 双端队列<br></span><span class="ne-text">    size()<br></span><span class="ne-text">    empty()<br></span><span class="ne-text">    clear()<br></span><span class="ne-text">    front()/back()<br></span><span class="ne-text">    push_back()/pop_back()<br></span><span class="ne-text">    push_front()/pop_front()<br></span><span class="ne-text">    begin()/end()<br></span><span class="ne-text">    []</span></li><li id="u9c6ab898" data-lake-index-type="0"><span class="ne-text">set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列<br></span><span class="ne-text">    size()<br></span><span class="ne-text">    empty()<br></span><span class="ne-text">    clear()<br></span><span class="ne-text">    begin()/end()<br></span><span class="ne-text">    ++, -- 返回前驱和后继，时间复杂度 O(logn)</span></li></ol><pre data-language="plain" id="rdBtX" class="ne-codeblock language-plain"><code>set/multiset    insert()  插入一个数    find()  查找一个数    count()  返回某一个数的个数    erase()        (1) 输入是一个数x，删除所有x   O(k + logn)        (2) 输入一个迭代器，删除这个迭代器    lower_bound()/upper_bound()        lower_bound(x)  返回大于等于x的最小的数的迭代器        upper_bound(x)  返回大于x的最小的数的迭代器map/multimap    insert()  插入的数是一个pair    erase()  输入的参数是pair或者迭代器    find()    []  注意multimap不支持此操作。 时间复杂度是 O(logn)    lower_bound()/upper_bound()</code></pre><ol start="9" class="ne-ol"><li id="u731d79fc" data-lake-index-type="0"><span class="ne-text">unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表<br></span><span class="ne-text">    和上面类似，增删改查的时间复杂度是 O(1)<br></span><span class="ne-text">    不支持 lower_bound()/upper_bound()， 迭代器的++，--</span></li><li id="uae1e3ba2" data-lake-index-type="0"><span class="ne-text">bitset, 圧位<br></span><span class="ne-text">    bitset&lt;10000&gt; s;<br></span><span class="ne-text">    ~, &amp;, |, ^<br></span><span class="ne-text">    &gt;&gt;, &lt;&lt;<br></span><span class="ne-text">    ==, !=<br></span><span class="ne-text">    []</span></li></ol><pre data-language="plain" id="xybSq" class="ne-codeblock language-plain"><code>count()  返回有多少个1<p>any()  判断是否至少有一个1<br>none()  判断是否全为0</p><p>set()  把所有位置成1<br>set(k, v)  将第k位变成v<br>reset()  把所有位变成0<br>flip()  等价于~<br>flip(k) 把第k位取反</p></code></pre></details><p></p>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 算法基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一讲_基础算法</title>
      <link href="/archives/f706052b.html"/>
      <url>/archives/f706052b.html</url>
      
        <content type="html"><![CDATA[<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span> <span class="token comment">//表示只有一个元素或者没有元素</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>x <span class="token operator">=</span> q<span class="token punctuation">[</span>l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">do</span> i<span class="token operator">++</span> <span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>l<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> l <span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//合并</span>    <span class="token comment">//双指针</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>i <span class="token operator">=</span> l<span class="token punctuation">,</span>j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> l<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> r <span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> mid <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//检查x是否满足某种性质</span><span class="token comment">//区间[l,r]被划分成[l,mid]和[mid + 1,r]</span><span class="token keyword">int</span> <span class="token function">bsearch_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//区间[l,r]被划分成[l,mid - 1]和[mid,r]</span><span class="token keyword">int</span> <span class="token function">bsearch_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//求一个数的三次方根</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000</span><span class="token punctuation">,</span>r <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&gt;</span> <span class="token number">1e-8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">*</span> mid <span class="token operator">*</span> mid <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高精度运算"><a href="#高精度运算" class="headerlink" title="高精度运算"></a>高精度运算</h4><h5 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h5><details class="lake-collapse"><summary id="u74b57113"><span class="ne-text">A + B ; A &gt;= 0 ; B &gt;= 0</span></summary><ol class="ne-ol"><li id="u9c52d21e" data-lake-index-type="0"><span class="ne-text">输入两个正整数，计算他们的和</span></li><li id="uc20675de" data-lake-index-type="0"><span class="ne-text">精度都比较高，普通int存储不了，需要用数组来存储。</span></li><li id="uba2a0c42" data-lake-index-type="0"><span class="ne-text">按位置相加，注意进位信息即可</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">add</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>     vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//进位信息</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果有进位</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h5><details class="lake-collapse"><summary id="ufca1f722"><span class="ne-text">A - B ; A &gt;= 0 ; B &gt;= 0</span></summary><ol class="ne-ol"><li id="u23e4b227" data-lake-index-type="0"><span class="ne-text">cmp函数用来比较两数的大小</span></li><li id="u9e56cd04" data-lake-index-type="0"><span class="ne-text">sub函数用来进行两数的相减</span></li></ol><ol class="ne-list-wrap"><ol ne-level="1" class="ne-ol"><li id="u972994b6" data-lake-index-type="0"><span class="ne-text">t + 10 % 10 糅合了两种情况 </span></li><li id="u8df84ffe" data-lake-index-type="0"><span class="ne-text">if(t&lt;0) t=1 else t= 0 如果t&lt;0说明不够借 t就需要等于1</span></li></ol></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//判断A是否大于等于B</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//等于</span><span class="token punctuation">}</span><span class="token comment">//A &gt;= B</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sub</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> B<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//代表借位信息</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        t <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> t<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">-=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//t此时要么是负数 那就需要借位答案加10 说明不够减</span>        <span class="token comment">//如果是非负数 说明够减</span>        <span class="token comment">//利用(t + 10) % 10 来统一</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果t是负数 那么需要借位 t = 1 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>        <span class="token comment">//删除前导0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         C <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         C <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token char">'-'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">div</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//b是商 c是余数</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        t <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">%=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>C<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token comment">//余数</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h4><h5 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h5><details class="lake-collapse"><summary id="ud07bd158"><span class="ne-text">一维前缀和</span></summary><ol class="ne-ol"><li id="u232a8a93" data-lake-index-type="0"><span class="ne-text">s[i] = s[i-1] + a[i]  构造前缀和</span></li><li id="ucf7a109a" data-lake-index-type="0"><span class="ne-text">区间l,r之间的和   =  s[r] - s[l - 1]</span></li><li id="udeb0547d" data-lake-index-type="0"><span class="ne-text">a[]和s[]都是从下标1开始存储，这样可以统一</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//a[] 为原数组 </span><span class="token comment">//s[] 为前缀和数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//构建前缀和数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h5><details class="lake-collapse"><summary id="u6a4fa451"><span class="ne-text">二维前缀和</span></summary><p id="ue51bfda3" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1720172404549-1d0dfd35-4989-4dcb-957b-6b13f46e1585.png" width="611.2" id="ufa309987" class="ne-image"></p><p id="u06923132" class="ne-p"><span class="ne-text">结合图形理解： </span><a href="https://www.acwing.com/file_system/file/content/whole/index/content/1537283/" data-href="https://www.acwing.com/file_system/file/content/whole/index/content/1537283/" target="_blank" class="ne-link"><span class="ne-text">https://www.acwing.com/file_system/file/content/whole/index/content/1537283/</span></a></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token comment">//a原数组 s前缀和数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>q<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//填充前缀和数组</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x1<span class="token punctuation">,</span><span class="token operator">&amp;</span>y1<span class="token punctuation">,</span><span class="token operator">&amp;</span>x2<span class="token punctuation">,</span><span class="token operator">&amp;</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>x1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y1 <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>x1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//利用前缀和矩阵求子矩阵的和</span>    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h5><details class="lake-collapse"><summary id="uec6e4651"><span class="ne-text">一维差分</span></summary><p id="ua7d41767" class="ne-p"><span class="ne-text">两种做法</span></p><ol class="ne-ol"><li id="u87d1b021" data-lake-index-type="0"><a href="https://www.acwing.com/file_system/file/content/whole/index/content/1534668/" data-href="https://www.acwing.com/file_system/file/content/whole/index/content/1534668/" target="_blank" class="ne-link"><span class="ne-text">https://www.acwing.com/file_system/file/content/whole/index/content/1534668/</span></a></li><li id="uf7200f75" data-lake-index-type="0"><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3581240/" data-href="https://www.acwing.com/file_system/file/content/whole/index/content/3581240/" target="_blank" class="ne-link"><span class="ne-text">https://www.acwing.com/file_system/file/content/whole/index/content/3581240/</span></a></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//初始化差分数组</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>        b<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>        b<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//给区间l到r的原数组a都加上c 实际上只需O(1)的时间操作差分数组即可</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    b<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化差分数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//实现前缀和</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h5><details class="lake-collapse"><summary id="uc3d48b33"><span class="ne-text">二维差分</span></summary><p id="u64e90747" class="ne-p"><a href="https://www.acwing.com/file_system/file/content/whole/index/content/1538114/" data-href="https://www.acwing.com/file_system/file/content/whole/index/content/1538114/" target="_blank" class="ne-link"><span class="ne-text">https://www.acwing.com/file_system/file/content/whole/index/content/1538114/</span></a></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>q<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    b<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//初始化差分数组</span>            <span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x1<span class="token punctuation">,</span><span class="token operator">&amp;</span>y1<span class="token punctuation">,</span><span class="token operator">&amp;</span>x2<span class="token punctuation">,</span><span class="token operator">&amp;</span>y2<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//更新前缀和</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span>"\n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h4><details class="lake-collapse"><summary id="u4bbc9663"><span class="ne-text">双指针算法</span></summary><ol class="ne-ol"><li id="ufe163d03" data-lake-index-type="0"><span class="ne-text">任何双指针算法都可用朴素算法先得到，之后满足某种单调性，可以利用双指针算法将原朴素算法的时间复杂度由O（n2）减少为O(n)。</span></li><li id="uf903a5ee" data-lake-index-type="0"><span class="ne-text">双指针算法的模板如下：</span></li></ol><pre data-language="cpp" id="apzRK" class="ne-codeblock language-cpp"><code>//核心思想for(int i = 0;i&lt;n;i++)    for(int j = 0;j &lt;n;j++)        //代码内容 O（n^2）<p>//双指针算法模板<br>for(int i = 0,j = 0;i &lt; n;i++)<br>    while( j &lt; i &amp;&amp; check(j,i)) j++;<br>    //每道题目的具体逻辑</p></code></pre><p id="u6e888d31" class="ne-p"><span class="ne-text">  3. 常见问题分类：</span></p><p id="ud4413fb7" class="ne-p" style="text-indent: 2em"><span class="ne-text">（1） 对于一个序列，用两个指针维护一段区间</span></p><p id="u03247160" class="ne-p" style="text-indent: 2em"><span class="ne-text">（2）对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</span></p></details><p></p><h5 id="最长连续不重复子序列"><a href="#最长连续不重复子序列" class="headerlink" title="最长连续不重复子序列"></a>最长连续不重复子序列</h5><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/153503/">https://www.acwing.com/file_system/file/content/whole/index/content/153503/</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>res<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">--</span>s<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//先减后j向右移动</span>        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><details class="lake-collapse"><summary id="u849aab3c"><span class="ne-text">位运算常用的两种操作</span></summary><ol class="ne-ol"><li id="u980ba35f" data-lake-index-type="0"><span class="ne-text">求n的第k位数字： n &gt;&gt; k &amp;&amp; 1</span></li><li id="ub03037e9" data-lake-index-type="0"><span class="ne-text">返回n的最后一位1: lowbit(n) =  n &amp; -n</span></li></ol></details><h4 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h4><details class="lake-collapse"><summary id="u6c351bad"><span class="ne-text">离散化介绍+模板</span></summary><ol class="ne-ol"><li id="ud9f1fe7d" data-lake-index-type="0"><span class="ne-text">离散化，把</span><span class="ne-text" style="color: #DF2A3F">无限空间中有限的个体映射到有限的空间中去</span><span class="ne-text">，以此提高算法的时空效率。</span></li></ol><p id="ufa9d146d" class="ne-p"><span class="ne-text">通俗的说，</span><span class="ne-text" style="background-color: #FBDE28">离散化是在不改变数据相对大小的条件下，对数据进行相应的缩小</span><span class="ne-text">。例如：</span></p><p id="u6b6a42ba" class="ne-p"><span class="ne-text">原数据：1,999,100000,15；处理后：1,3,4,2</span></p><ol start="2" class="ne-ol"><li id="u289df5d8" data-lake-index-type="0"><span class="ne-text">模板：</span></li></ol><pre data-language="cpp" id="P6eOl" class="ne-codeblock language-cpp"><code>vector&lt;int&gt; alls; // 存储所有待离散化的值sort(alls.begin(), alls.end()); // 将所有值排序alls.erase(unique(alls.begin(), alls.end()), alls.end());   // 去掉重复元素<p>// 二分求出x对应的离散化的值<br>int find(int x) // 找到第一个大于等于x的位置<br>{<br>    int l = 0, r = alls.size() - 1;<br>    while (l &lt; r)<br>    {<br>        int mid = l + r &gt;&gt; 1;<br>        if (alls[mid] &gt;= x) r = mid;<br>        else l = mid + 1;<br>    }<br>    return r + 1; // 映射到1, 2, …n<br>}</p></code></pre><p id="ubf93a7b5" class="ne-p"><br></p></details><p></p><h5 id="acwing-802-区间和（离散化）"><a href="#acwing-802-区间和（离散化）" class="headerlink" title="acwing 802. 区间和（离散化）"></a>acwing 802. 区间和（离散化）</h5><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3418612/">https://www.acwing.com/file_system/file/content/whole/index/content/3418612/</a></p><h4 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h4><details class="lake-collapse"><summary id="ude9bcbaa"><span class="ne-text">区间合并模板</span></summary><pre data-language="cpp" id="zAr6v" class="ne-codeblock language-cpp"><code>区间合并模板// 将所有存在交集的区间合并void merge(vector&lt;PII&gt; &amp;segs){    vector&lt;PII&gt; res;<pre><code>sort(segs.begin(), segs.end());int st = -2e9, ed = -2e9;for (auto seg : segs)    if (ed &amp;lt; seg.first)    {        if (st != -2e9) res.push_back({st, ed});        st = seg.first, ed = seg.second;    }    else ed = max(ed, seg.second);if (st != -2e9) res.push_back({st, ed});segs = res;</code></pre><p>}</p></code></pre></details><p></p><h5 id="acwing-803-区间合并"><a href="#acwing-803-区间合并" class="headerlink" title="acwing 803. 区间合并"></a>acwing 803. 区间合并</h5><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2006/">https://www.acwing.com/file_system/file/content/whole/index/content/2006/</a></p>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 算法基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八讲_STL与位运算</title>
      <link href="/archives/dd8eb0e.html"/>
      <url>/archives/dd8eb0e.html</url>
      
        <content type="html"><![CDATA[<h4 id="调整数组顺序使奇数位于偶数前面-双指针法）"><a href="#调整数组顺序使奇数位于偶数前面-双指针法）" class="headerlink" title="调整数组顺序使奇数位于偶数前面 (双指针法）"></a><font style="color:rgb(51, 51, 51);">调整数组顺序使奇数位于偶数前面 (双指针法）</font></h4><p><a href="https://www.acwing.com/problem/content/description/30/">https://www.acwing.com/problem/content/description/30/</a></p><details class="lake-collapse"><summary id="u8041571c"><span class="ne-text">双指针法</span></summary><p id="u98392efb" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1719910012472-51da84d5-b3d1-4807-8d30-b6e195718947.png" width="520" id="u8c5d0f4b" class="ne-image"></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">reOrderArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//双指针法</span>         <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h4><p><a href="https://www.acwing.com/problem/content/36/">https://www.acwing.com/problem/content/36/</a></p><details class="lake-collapse"><summary id="u1a42cb34"><span class="ne-text">题解</span></summary><ol class="ne-ol"><li id="uec7b1ba4" data-lake-index-type="0"><span class="ne-text">定义两个栈，一个是工作栈s1，一个是辅助栈s2</span></li><li id="uf7c8ffb6" data-lake-index-type="0"><span class="ne-text">pop操作其实就是将s1的其他元素暂时挪到s2中，然后保存s1的top元素，随后s1再把这个pop后，再将s2中的元素挪到s1中来</span></li><li id="ufb7c879a" data-lake-index-type="0"><span class="ne-text">peek操作同理</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>    <span class="token comment">/** Initialize your data structure here. */</span>    <span class="token function">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token comment">/** Push element x to the back of queue. */</span>    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/** Removes the element from in front of queue and returns that element. */</span>    <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> s2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment">/** Get the front element. */</span>    <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> s2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment">/** Returns whether the queue is empty. */</span>    <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法基础 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七讲_类、结构体、引用和指针</title>
      <link href="/archives/16f0da5a.html"/>
      <url>/archives/16f0da5a.html</url>
      
        <content type="html"><![CDATA[<h4 id="替换空格（线性扫描、双指针扫描）"><a href="#替换空格（线性扫描、双指针扫描）" class="headerlink" title="替换空格（线性扫描、双指针扫描）"></a>替换空格（线性扫描、双指针扫描）</h4><p><a href="https://www.acwing.com/problem/content/description/17/">https://www.acwing.com/problem/content/description/17/</a></p><details class="lake-collapse"><summary id="uaba87064"><span class="ne-text">notes</span></summary><ol class="ne-ol"><li id="uc1e0b91b" data-lake-index-type="0"><span class="ne-text">线性扫描</span></li></ol><p id="u23701fa5" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1719815318674-5bff1be1-4a8d-4d39-ae52-1393395b773b.png" width="726" id="u6d4ca1d7" class="ne-image"></p><ol start="2" class="ne-ol"><li id="u48186b33" data-lake-index-type="0"><span class="ne-text">双指针扫描</span></li></ol><p id="uad0393e2" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1719815369565-32b509e5-eced-4b41-b38a-f3ea35e7c403.png" width="689.6" id="ub7330e72" class="ne-image"></p><p id="uc0a1c1fe" class="ne-p"><br></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">replaceSpaces</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token string">"%20"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> res <span class="token operator">+=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//部分编程语言支持动态地将数组长度扩大，可以使用双指针算法，降低空间的使用</span>    string <span class="token function">replaceSpaces</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> len <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> len <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>j <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//i定位到原数组的最后一位 j定位到新数组的最后一位</span>                str<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重新扩容</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                str<span class="token punctuation">[</span>j <span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>                str<span class="token punctuation">[</span>j <span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'2'</span><span class="token punctuation">;</span>                str<span class="token punctuation">[</span>j <span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'%'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                str<span class="token punctuation">[</span>j <span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="短路操作终止递归"><a href="#短路操作终止递归" class="headerlink" title="短路操作终止递归"></a>短路操作终止递归<font style="background-color:#FBDE28;"></font></h4><p><a href="https://www.acwing.com/problem/content/80/">https://www.acwing.com/problem/content/80/</a></p><details class="lake-collapse"><summary id="u4b30d33d"><span class="ne-text">短路操作</span></summary><ol class="ne-ol"><li id="u0cabbfd5" data-lake-index-type="0" style="text-align: left"><span class="ne-text">什么是短路操作</span></li></ol><p id="ua57a0553" class="ne-p" style="text-align: left; text-indent: 2em"><span class="ne-text" style="color: rgb(26, 32, 41); font-size: 13px">在 C++ 中，递归是一种常见的编程技术，其中一个函数会调用自身来解决问题。然而，递归如果不正确处理，可能会导致栈溢出错误，特别是当递归深度非常大时。为了防止这种情况，通常需要一个终止条件，当满足这个条件时，递归调用将停止。</span></p><p id="u6cf542cc" class="ne-p" style="text-align: left; text-indent: 2em"><span class="ne-text" style="color: rgb(26, 32, 41); background-color: #FBDE28; font-size: 13px">短路操作是一种在 C++ 中利用逻辑运算符的特性来终止递归的技术。</span><span class="ne-text" style="color: rgb(26, 32, 41); font-size: 13px">C++ 中的逻辑运算符 &amp;&amp;（逻辑与）和 ||（逻辑或）支持短路评估。这意味着在表达式</span><span class="ne-text" style="color: #DF2A3F; font-size: 13px"> expr1 &amp;&amp; expr2</span><span class="ne-text" style="color: rgb(26, 32, 41); font-size: 13px"> 中，如果 </span><span class="ne-text" style="color: #DF2A3F; font-size: 13px">expr1 为 false，那么 expr2 将不会被评估</span><span class="ne-text" style="color: rgb(26, 32, 41); font-size: 13px">，因为整个表达式的结果已经确定为 false。类似地，在表达式</span><span class="ne-text" style="color: #DF2A3F; font-size: 13px"> expr1 || expr2</span><span class="ne-text" style="color: rgb(26, 32, 41); font-size: 13px"> 中，如果 </span><span class="ne-text" style="color: #DF2A3F; font-size: 13px">expr1 为 true，那么 expr2 将不会被评估</span><span class="ne-text" style="color: rgb(26, 32, 41); font-size: 13px">，因为整个表达式的结果已经确定为 true。</span></p><p id="ud56f404d" class="ne-p" style="text-align: left; text-indent: 2em"><span class="ne-text" style="color: rgb(26, 32, 41); font-size: 13px">利用短路操作终止递归的</span><span class="ne-text" style="color: rgb(26, 32, 41); background-color: #FBDE28; font-size: 13px">典型做法</span><span class="ne-text" style="color: rgb(26, 32, 41); font-size: 13px">是</span><span class="ne-text" style="color: rgb(26, 32, 41); background-color: #FBDE28; font-size: 13px">将递归调用作为逻辑表达式的部分，并且确保当递归应该终止时，表达式的某个部分能够短路整个表达式。</span></p><hr id="S9rPG" class="ne-hr"><p id="u45c9f180" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1719816158680-ec02336c-8a05-4783-a7f8-349440633ecf.png" width="690" id="u0226eb32" class="ne-image"></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//递归、利用短路操作终止递归</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>res <span class="token operator">+=</span> <span class="token function">getSum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单链表删除节点-O（1）"><a href="#单链表删除节点-O（1）" class="headerlink" title="单链表删除节点 O（1）"></a>单链表删除节点 O（1）</h4><p><a href="https://www.acwing.com/problem/content/85/">https://www.acwing.com/problem/content/85/</a></p><details class="lake-collapse"><summary id="u6b83e4c4"></summary><p id="u0392228c" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1719817065359-ca580715-e38d-404d-b3f9-d18f16e8b485.png" width="576" id="uc5e81e0a" class="ne-image"></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//单链表 没有前驱节点 借下一个节点的数据 删除下一个节点</span>        ListNode<span class="token operator">*</span> p <span class="token operator">=</span> node <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>                node<span class="token operator">-&gt;</span>val <span class="token operator">=</span> p <span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>                <span class="token keyword">delete</span> p<span class="token punctuation">;</span> <span class="token comment">//释放内存</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并两个排序的链表（递归版本、迭代版本）"><a href="#合并两个排序的链表（递归版本、迭代版本）" class="headerlink" title="合并两个排序的链表（递归版本、迭代版本）"></a>合并两个排序的链表（递归版本、迭代版本）</h4><p><a href="https://www.acwing.com/problem/content/submission/code_detail/35674016/">https://www.acwing.com/problem/content/submission/code_detail/35674016/</a></p><details class="lake-collapse"><summary id="uf036718d"></summary><ol class="ne-ol"><li id="u0b8889fd" data-lake-index-type="0"><span class="ne-text">迭代版本</span></li></ol><p id="u7de5f8e9" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1719818744356-06ebff25-fca3-431e-a22f-32f01423405f.png" width="787.2" id="u5d89926d" class="ne-image"></p><ol start="2" class="ne-ol"><li id="u45492d9d" data-lake-index-type="0"><span class="ne-text">递归版本</span></li></ol><p id="ue482e056" class="ne-p"><span class="ne-text">递归时比较l1和l2的val，将更小的赋值给l1，最后返回l1即可。(多理解）</span></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">merge</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//迭代版本</span>        ListNode<span class="token operator">*</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">-&gt;</span> val <span class="token operator">&lt;</span> l2 <span class="token operator">-&gt;</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur <span class="token operator">-&gt;</span> next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                l1 <span class="token operator">=</span> l1 <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                cur <span class="token operator">-&gt;</span> next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2 <span class="token operator">=</span> l2 <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur <span class="token operator">=</span> cur <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//接上剩余部分</span>        cur <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">?</span> l2 <span class="token operator">:</span> l1<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">merge</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//处理l1或者l2为空的情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l1 <span class="token operator">||</span> <span class="token operator">!</span>l2<span class="token punctuation">)</span> <span class="token keyword">return</span> l1 <span class="token operator">?</span> l1 <span class="token operator">:</span> l2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">-&gt;</span> val <span class="token operator">&gt;</span> l2 <span class="token operator">-&gt;</span> val<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>        l1 <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>l1 <span class="token operator">-&gt;</span> next <span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="链表反转（递归版本、迭代版本）"><a href="#链表反转（递归版本、迭代版本）" class="headerlink" title="链表反转（递归版本、迭代版本）"></a>链表反转（递归版本、迭代版本）</h4><p><a href="https://www.acwing.com/problem/content/33/">https://www.acwing.com/problem/content/33/</a></p><details class="lake-collapse"><summary id="u8ce4bfa5"></summary><ol class="ne-ol"><li id="ufd4b8442" data-lake-index-type="0"><span class="ne-text">递归版本</span></li></ol><p id="ua6f640c4" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1719883716659-5ae3f5b5-d214-43ee-9e58-7aeca9c17674.png" width="974" id="u48dd01fa" class="ne-image"></p><ol start="2" class="ne-ol"><li id="ua55d7b94" data-lake-index-type="0"><span class="ne-text">迭代版本</span></li></ol><p id="u57574c4b" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1719883770176-a5c3daab-8248-427d-9d22-a2fb95f84e40.png" width="967" id="ud8aaf070" class="ne-image"></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//递归版本</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span> <span class="token punctuation">(</span> head <span class="token operator">-&gt;</span> next<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token comment">//原来的尾节点就是反转后的头节点</span>        ListNode<span class="token operator">*</span> tail <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head <span class="token operator">-&gt;</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">-&gt;</span> next <span class="token operator">-&gt;</span> next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tail<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//迭代版本</span>        ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">//保存节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            next <span class="token operator">=</span> cur <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>            cur <span class="token operator">-&gt;</span> next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">,</span>cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="两个链表的第一个公共节点（-普通方法、双指针法"><a href="#两个链表的第一个公共节点（-普通方法、双指针法" class="headerlink" title="两个链表的第一个公共节点（ 普通方法、双指针法)"></a>两个链表的第一个公共节点（ 普通方法、双指针法)</h4><p><a href="https://www.acwing.com/problem/content/description/62/">https://www.acwing.com/problem/content/description/62/</a></p><details class="lake-collapse"><summary id="u1bf4eb9a"></summary><p id="ub767b08d" class="ne-p"><span class="ne-text" style="background-color: #FBDE28">如果有公共结点肯定是在后面重叠，且后面部分都是共同的。</span></p><p id="u2d777d9e" class="ne-p"><span class="ne-text" style="color: #DF2A3F">方法1</span><span class="ne-text">：先计算出两个链表的长度，可以让比较长的先走两个链表长度之差的步数，两个再一起走。</span></p><p id="u5eff0663" class="ne-p"><span class="ne-text" style="color: #DF2A3F">方法2</span><span class="ne-text">:  </span></p><p id="uc223840a" class="ne-p" style="text-indent: 2em"><span class="ne-text">① 题解：</span></p><p id="ue1e6463f" class="ne-p" style="margin-left: 4em"><span class="ne-text">a. 用两个指针 p1，p2 分别指向两个链表 headA，headB 的头结点，同时向后遍历。</span></p><p id="ufac95095" class="ne-p" style="margin-left: 4em"><span class="ne-text">b. 当指针到达链表末尾时，重新定位到另一个链表的头结点。</span></p><p id="u225433cf" class="ne-p" style="margin-left: 4em"><span class="ne-text">c. 当它们相遇时，所指向的结点就是第一个公共结点。</span></p><p id="u70031822" class="ne-p" style="text-indent: 2em"><span class="ne-text">② 解释：</span></p><p id="ue601c877" class="ne-p" style="text-indent: 2em"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1719886002933-ad2ab277-efe4-4e89-934b-b3afede956b0.png" width="959" id="u2444c217" class="ne-image"></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">findFirstCommonNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//定义p永远指向较长的</span>        ListNode <span class="token operator">*</span>p <span class="token operator">=</span> headA<span class="token punctuation">,</span><span class="token operator">*</span>q <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">int</span> lenA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>lenB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// for (auto t = headA; t; t = t-&gt;next) lenA ++;</span>        <span class="token comment">// for (auto t = headB; t; t = t-&gt;next) lenB ++;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>            lenA <span class="token operator">++</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>            lenB <span class="token operator">++</span><span class="token punctuation">;</span>            q <span class="token operator">=</span> q <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> headA<span class="token punctuation">,</span>q <span class="token operator">=</span> headB<span class="token punctuation">;</span>        k <span class="token operator">=</span> lenA <span class="token operator">-</span> lenB<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lenB <span class="token operator">&gt;</span> lenA<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//保证p永远指向较长的链表</span>            p <span class="token operator">=</span> headB<span class="token punctuation">,</span>q <span class="token operator">=</span> headA<span class="token punctuation">;</span>            k <span class="token operator">=</span> lenB <span class="token operator">-</span> lenA<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        <span class="token comment">//目前p,q在同一起跑线</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>            q <span class="token operator">=</span> q <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//跳出 说明没有共同节点</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">findFirstCommonNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//双指针法寻找公共节点</span>        ListNode<span class="token operator">*</span> p <span class="token operator">=</span> headA<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> q <span class="token operator">=</span> headB<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> p <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span> <span class="token comment">//p不为空 移动到下一个节点</span>            <span class="token keyword">else</span> p <span class="token operator">=</span> headB<span class="token punctuation">;</span> <span class="token comment">//p为空 p移动到headB</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> q <span class="token operator">=</span> q <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>            <span class="token keyword">else</span> q <span class="token operator">=</span> headA<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//至此，p,q相遇 为公共节点 即使没有公共节点 那也都是nullptr</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="把字符串转化成整数"><a href="#把字符串转化成整数" class="headerlink" title="把字符串转化成整数"></a>把字符串转化成整数</h4><p><a href="https://www.acwing.com/problem/content/description/83/">https://www.acwing.com/problem/content/description/83/</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">strToInt</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> k<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token comment">//普通int存放不下</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">//处理正负数</span>        <span class="token keyword">int</span> minus <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> minus <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span> k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span> <span class="token comment">//这里的res 是绝对值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&gt;</span> <span class="token number">1e11</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                res <span class="token operator">*=</span> minus<span class="token punctuation">;</span> <span class="token comment">//处理负数</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&gt;</span> INT_MAX<span class="token punctuation">)</span> res <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> INT_MIN<span class="token punctuation">)</span> res <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>                        <span class="token keyword">return</span> res<span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除链表中重复的节点"><a href="#删除链表中重复的节点" class="headerlink" title="删除链表中重复的节点"></a>删除链表中重复的节点</h4><p><a href="https://www.acwing.com/problem/content/description/27/">https://www.acwing.com/problem/content/description/27/</a></p><details class="lake-collapse"><summary id="u254e6bde"></summary><ol class="ne-ol"><li id="uad1fb47a" data-lake-index-type="0"><span class="ne-text">首先考虑到边界问题，需设立一个虚拟头节点，统一操作</span></li><li id="u2fe45bef" data-lake-index-type="0"><span class="ne-text">使用两个指针p,q；p用来遍历整个链表，q始终指向相同元素的最后一个位置</span></li><li id="u42847417" data-lake-index-type="0"><span class="ne-text">p,q确定好后，如果q是p的下一个位置，说明没有重复元素，p移动到q的位置，否则就需要删除元素，即 p -&gt; next = q -&gt; next</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">deleteDuplication</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建虚拟头节点</span>        dummy <span class="token operator">-&gt;</span> next <span class="token operator">=</span> head<span class="token punctuation">;</span>                <span class="token keyword">auto</span> p <span class="token operator">=</span> dummy<span class="token punctuation">;</span> <span class="token comment">//p来遍历链表</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">auto</span> q <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next <span class="token punctuation">;</span><span class="token comment">// q来寻找相同的元素</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">-&gt;</span> next <span class="token operator">&amp;&amp;</span> q <span class="token operator">-&gt;</span> val <span class="token operator">==</span> q <span class="token operator">-&gt;</span> next <span class="token operator">-&gt;</span> val<span class="token punctuation">)</span> q <span class="token operator">=</span> q <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span> <span class="token comment">//q 始终指向重复元素的最后一个位置</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">==</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">)</span> p <span class="token operator">=</span> q<span class="token punctuation">;</span> <span class="token comment">//说明没有重复元素 p继续遍历</span>            <span class="token keyword">else</span> p <span class="token operator">-&gt;</span> next <span class="token operator">=</span> q <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span> <span class="token comment">//有相同元素 删去</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法基础 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六讲_函数</title>
      <link href="/archives/6be25c2a.html"/>
      <url>/archives/6be25c2a.html</url>
      
        <content type="html"><![CDATA[<h4 id="最大公约数（辗转相除法-x2F-欧几里得算法"><a href="#最大公约数（辗转相除法-x2F-欧几里得算法" class="headerlink" title="最大公约数（辗转相除法/欧几里得算法)"></a>最大公约数（辗转相除法/欧几里得算法)</h4><p><a href="https://www.acwing.com/problem/content/810/">https://www.acwing.com/problem/content/810/</a></p><details class="lake-collapse"><summary id="u1836b0c3"><span class="ne-text">求两个数的最大公约数</span></summary><ol class="ne-ol"><li id="u633a491f" data-lake-index-type="0"><span class="ne-text">使用辗转相除法，又叫欧几里得算法，是一种用于计算两个非负整数的最大公约数的算法。</span></li><li id="u93b49d7b" data-lake-index-type="0"><span class="ne-text">基于以下原理：两个数的最大公约数等于其中较小的数和两数相除的余数的最大公约数。</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>        a <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符输入（字符数组、string"><a href="#字符输入（字符数组、string" class="headerlink" title="字符输入（字符数组、string)"></a>字符输入（字符数组、string)</h4><p><a href="https://www.acwing.com/problem/content/description/817/">https://www.acwing.com/problem/content/description/817/</a></p><details class="lake-collapse"><summary id="u7bb4c184"></summary><ol class="ne-ol"><li id="u69ce3e42" data-lake-index-type="0"><span class="ne-text">使用字符数组  字符数组要使用 cin.getline 读入， 第一个参数为字符数组名，第二个参数为长度，为了确保数据全部读入，该数字要比长度大一点！！！</span></li><li id="ue405422f" data-lake-index-type="0"><span class="ne-text">直接使用字符串就不会读不完整的问题，不过还是注意输入有空格，所以使用 getline 读入字符串。</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// for(int i = 0; a[i];i++) cout &lt;&lt; a[i]; 等价</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//使用字符数组读入</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//使用string读入</span>    string str<span class="token punctuation">;</span>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="跳台阶-（递归的应用）"><a href="#跳台阶-（递归的应用）" class="headerlink" title="跳台阶 （递归的应用）"></a>跳台阶 （递归的应用）</h4><p><a href="https://www.acwing.com/problem/content/823/">https://www.acwing.com/problem/content/823/</a></p><details class="lake-collapse"><summary id="u37e2d718"><span class="ne-text">递归（画递归搜索树）</span></summary><ol class="ne-ol"><li id="u5c91b539" data-lake-index-type="0"><span class="ne-text">需要靠递归来写，递归实际上就是深度优先搜索，实际相当于调用了系统栈，利用系统栈来存储信息,</span></li><li id="u055f988b" data-lake-index-type="0"><span class="ne-text">本题关键在于跳一步或者跳两步</span></li></ol><p id="ub05bb624" class="ne-p"><span class="ne-text"></span></p><p id="u6775bae0" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1719713411668-b79ce789-f880-47e2-92e3-d87a9428dcf9.png" width="1185.6" id="u401a59b8" class="ne-image"></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">int</span> ans<span class="token punctuation">;</span> <span class="token comment">//方案数</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// k代表目前跳到了第几层</span>    <span class="token comment">//递归一定要注意写终止条件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> n<span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//两种方法 跳一层或者跳两层</span>        <span class="token function">f</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">f</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从第O层开始跳</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="选方格-（递归的应用"><a href="#选方格-（递归的应用" class="headerlink" title="选方格 （递归的应用)"></a>选方格 （递归的应用)</h4><p><a href="https://www.acwing.com/problem/content/submission/824/">https://www.acwing.com/problem/content/submission/824/</a></p><details class="lake-collapse"><summary id="uf5d84d69"></summary><ol class="ne-ol"><li id="ub2078887" data-lake-index-type="0"><span class="ne-text">大体思路同3，但关键在于是向右跳和向下跳</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token punctuation">;</span> <span class="token comment">//方案数</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">==</span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> m<span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token comment">//dfs</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数字排列"><a href="#数字排列" class="headerlink" title="数字排列"></a>数字排列</h4><p><a href="https://www.acwing.com/problem/content/description/825/">https://www.acwing.com/problem/content/description/825/</a></p><details class="lake-collapse"><summary id="u8be40ca4"></summary><p id="u962dec5e" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1719717813415-06657ac9-de1e-4410-bd06-f69ecd7693e0.png" width="1028.8" id="u3d3bcfdf" class="ne-image"></p><ol class="ne-ol"><li id="ucde6dd92" data-lake-index-type="0"><span class="ne-text">递归搜索树如上图所示</span></li><li id="u164dfc20" data-lake-index-type="0"><span class="ne-text">本题执行递归时还额外需要两个参数,nums[]用来记录数字的排列，state[]用来记录数字是否被使用过，同时还需要注意恢复现场，以避免漏掉其他情况</span></li><li id="u98c02977" data-lake-index-type="0"><span class="ne-text">对于输出比较多的题，使用printf和scanf 比 cin 和 cout 快的多，可以节省较多时间，不过需要注意的是最好要配套使用</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">bool</span> state<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//这里的k表示目前存储的第几个位置</span>    <span class="token comment">//递归先写终止条件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&gt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//这里K不能等于n 因为等于n就意味着第n个位置还没有进行数字排列</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//需要判断该数字是否已经被使用过</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//表示该数字已经被使用过</span>                <span class="token comment">//接下来就是下一个位置去排列了</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nums<span class="token punctuation">,</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>                state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//需要恢复现场                </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//用来存放数字</span>    <span class="token keyword">bool</span> state<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//用来判断数字的状态即是否被使用过</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>nums<span class="token punctuation">,</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法基础 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五讲_字符串</title>
      <link href="/archives/17aa545b.html"/>
      <url>/archives/17aa545b.html</url>
      
        <content type="html"><![CDATA[<h4 id="单词替换"><a href="#单词替换" class="headerlink" title="单词替换"></a>单词替换</h4><p><a href="https://www.acwing.com/problem/content/772/">https://www.acwing.com/problem/content/772/</a></p><details class="lake-collapse"><summary id="u643d2344"><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px">输入一个字符串，以回车结束（字符串长度不超过 </span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 19px">100</span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px">100）。该字符串由若干个单词组成，单词之间用一个空格隔开，所有单词区分大小写。现需要将其中的某个单词替换成另一个单词，并输出替换之后的字符串。</span></summary><p id="u03226e8e" class="ne-p"><span class="ne-text" style="font-size: 16px"></span></p><p id="u95495b90" class="ne-p"><span class="ne-text" style="font-size: 16px">三种解决方法</span></p><ol class="ne-ol"><li id="u8527ab4e" data-lake-index-type="0"><span class="ne-text" style="font-size: 16px">将原始字符串中的每个单词（以空格间隔）存储到字符串数组中，遍历这个数组，如果遇到s1，输出s2，否则输出原始单词  （注意）这里用getchar()读入空格</span></li><li id="u0849d7ae" data-lake-index-type="0"><span class="ne-text" style="font-size: 16px">将所有的单词都读入字符串数组中，如果遇到str[n-2]，就输出str[n-1]，否则输出原始单词</span></li><li id="u32ffb4a5" data-lake-index-type="0"><span class="ne-text" style="font-size: 16px">借助string中的函数find(),replace()等</span></li></ol><p id="u97322098" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1716946354827-24c044c2-c73d-4d1b-a1c1-5a35e04a7da6.png" width="516" id="u23b3a55f" class="ne-image"></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string str<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//第一种方法</span>    <span class="token comment">//将原字符串按照单词存储到字符串数组中</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//记录单词数量</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> str<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收空格</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//如果是换行符 说明原始字符串读入完毕</span>    <span class="token punctuation">}</span>        string s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> s1 <span class="token operator">&gt;&gt;</span> s2<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s1<span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> s2 <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string str<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//第二种方法 直接读入所有的字符串</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//记录读入的单词个数</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> str<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">//str[n - 2] 被替换的单词  str[n - 1] 是替换的单词</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string str<span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    string s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> s1 <span class="token operator">&gt;&gt;</span> s2<span class="token punctuation">;</span>    <span class="token comment">//处理加工 忽略首尾情况</span>    str <span class="token operator">=</span> <span class="token char">' '</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token char">' '</span><span class="token punctuation">;</span>    s1 <span class="token operator">=</span> <span class="token char">' '</span> <span class="token operator">+</span> s1 <span class="token operator">+</span> <span class="token char">' '</span><span class="token punctuation">;</span>    s2 <span class="token operator">=</span> <span class="token char">' '</span> <span class="token operator">+</span> s2 <span class="token operator">+</span> <span class="token char">' '</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//找到就替换</span>        str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//删除首尾空格</span>    str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法基础 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四讲_数组</title>
      <link href="/archives/bbb1aa8.html"/>
      <url>/archives/bbb1aa8.html</url>
      
        <content type="html"><![CDATA[<h4 id="数组旋转"><a href="#数组旋转" class="headerlink" title="数组旋转"></a>数组旋转</h4><details class="lake-collapse"><summary id="ud7ff2b89"><span class="ne-text" style="font-size: 16px">输入一个n，再输入n个整数。将这个数组顺时针旋转k(k &lt;= n)次，最后将结果输出。</span></summary><p id="u9ea2bd9d" class="ne-p"><span class="ne-text" style="font-size: 16px">两种做法</span></p><ol class="ne-ol"><li id="ua9775af6" data-lake-index-type="0"><span class="ne-text" style="font-size: 16px">存储最后一个数字，然后依次将数组中的数字向后挪位置</span></li><li id="u930566e5" data-lake-index-type="0"><span class="ne-text" style="font-size: 16px">① 整体翻转a[] ② 翻转前半部分 ③ 翻转后半部分</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//reverse 第一个参数是翻转的起始位置  第二个参数是翻转的终止位置的下一个位置</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token operator">+</span>k<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高精度2的n次幂"><a href="#高精度2的n次幂" class="headerlink" title="高精度2的n次幂"></a>高精度2的n次幂</h4><details class="lake-collapse"><summary id="u347c4d79"><span class="ne-text" style="font-size: 16px">计算2的N次方。N &lt;= 10000</span></summary><p id="u375fa54e" class="ne-p"><span class="ne-text" style="font-size: 16px">由于double只能保证15位有效数字，不能满足需求，因此使用数组来存储。</span></p><ol class="ne-ol"><li id="u51c218c2" data-lake-index-type="0"><span class="ne-text" style="font-size: 16px">数组存储时，一般在进行乘法时会将数字倒着来存储，因为好进位</span></li><li id="u2766aad8" data-lake-index-type="0"><span class="ne-text" style="font-size: 16px">本题中n最大为10000，那最后的位数大概为3000多位置，可以预先开辟4000位置的数组，用size记录实际的位数，方便后续打印输出</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//重中之重</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            t <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> a<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="平方矩阵I-回型矩阵）"><a href="#平方矩阵I-回型矩阵）" class="headerlink" title="平方矩阵I (回型矩阵）"></a>平方矩阵I (回型矩阵）</h4><p><a href="https://www.acwing.com/problem/content/description/755/">https://www.acwing.com/problem/content/description/755/</a></p><details class="lake-collapse"><summary id="u75342373"><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px">输入整数 </span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 19px">N</span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px">，输出一个 </span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 19px">N</span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px"> 阶的回字形二维数组</span></summary><p id="uc22900f5" class="ne-p"><span class="ne-text" style="font-size: 16px">回兴矩阵的规律就在于 该元素到上下左右四条边距离的最小值即为所填元素</span></p><p id="u1576b4ab" class="ne-p"><span class="ne-text" style="font-size: 16px">min(min(left,right),min(up,down))</span></p></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> up <span class="token operator">=</span> i<span class="token punctuation">,</span>down <span class="token operator">=</span> n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>left <span class="token operator">=</span> j<span class="token punctuation">,</span>right <span class="token operator">=</span> n <span class="token operator">-</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span>down<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="平方矩阵2-（对角线矩阵）"><a href="#平方矩阵2-（对角线矩阵）" class="headerlink" title="平方矩阵2 （对角线矩阵）"></a>平方矩阵2 （对角线矩阵）</h4><p><a href="https://www.acwing.com/problem/content/description/756/">https://www.acwing.com/problem/content/description/756/</a></p><details class="lake-collapse"><summary id="u3a546741"><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px">输入整数 </span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 19px">N</span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px">，输出一个 </span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 19px">N</span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px">阶的二维数组。数组的形式参照样例。</span></summary><p id="u53fe0dc3" class="ne-p"><span class="ne-text" style="font-size: 16px">两种方法</span></p><ol class="ne-ol"><li id="u3ad704c6" data-lake-index-type="0"><span class="ne-text" style="font-size: 16px">先填满主对角线为1，然后依次向右向下延伸填写元素</span></li><li id="u2c2367ea" data-lake-index-type="0"><span class="ne-text" style="font-size: 16px">利用曼哈顿距离 | i - j | + 1</span></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//先写主对角线</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//使用规律</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="蛇形矩阵"><a href="#蛇形矩阵" class="headerlink" title="蛇形矩阵"></a>蛇形矩阵</h4><p><a href="https://www.acwing.com/problem/content/758/">https://www.acwing.com/problem/content/758/</a></p><details class="lake-collapse"><summary id="u85c6ce8f"><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px">输入两个整数 </span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 19px">n</span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px"> 和 </span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 19px">m</span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px">，输出一个 </span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 19px">n</span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px"> 行 </span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 19px">m</span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px"> 列的矩阵，将数字 </span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 19px">1</span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px"> 到 </span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 19px">n×m</span><span class="ne-text" style="color: rgb(51, 51, 51); font-size: 16px">按照回字蛇形填充至矩阵中</span></summary><p id="uad28e171" class="ne-p"><span class="ne-text" style="font-size: 16px">蛇形矩阵</span></p><ol class="ne-ol"><li id="udd38bf06" data-lake-index-type="0"><span class="ne-text" style="font-size: 16px">方向 右 下 左 上  用坐标表示  注意x是向下 y是向右</span></li><li id="u4e72a983" data-lake-index-type="0"><span class="ne-text" style="font-size: 16px">转换方向也就是撞墙有两种情况 ① 出界 ② 重复</span></li><li id="u56d1f0c0" data-lake-index-type="0"><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1716801081603-b54c1f94-0e70-4675-893c-a8f3ec5de534.png" width="624.8" id="u9874b0df" class="ne-image"></li></ol></details><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>        <span class="token comment">//方向</span>    <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dy<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> n <span class="token operator">*</span> m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//写第一个位置</span>        res<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token comment">//计算下一个位置</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">,</span>b <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//撞墙 (越界or 走过)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> a <span class="token operator">&gt;=</span> n <span class="token operator">||</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">&gt;=</span> m <span class="token operator">||</span> res<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            d <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span> b <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                x <span class="token operator">=</span> a<span class="token punctuation">;</span> y <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法基础 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三讲_循环语句</title>
      <link href="/archives/eb631d2c.html"/>
      <url>/archives/eb631d2c.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1716644242591-4688907c-d04d-48b8-a222-4a622af84de9.png"></p><h3 id="整理题目"><a href="#整理题目" class="headerlink" title="整理题目"></a>整理题目</h3><h4 id="A725-完全数"><a href="#A725-完全数" class="headerlink" title="A725. 完全数"></a>A725. 完全数</h4><p><a href="https://www.acwing.com/problem/content/description/727/">https://www.acwing.com/problem/content/description/727/</a></p><p>:::success<br>此题原始解法会出现时间超时错误，在c++中1s内运算上限是10^8次，而下面代码外层循环是O(n)，内层循环找约数是O(n<em>2)，在本题中也就是O(n</em>x)，也有10^10次，会超过时间限制，因此要进行代码优化。</p><p>:::</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> x<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is perfect\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is not perfect\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:::success<br>优化着手处</p><p>(1)外围的for循环 n 没办法优化了，铁定的循环100次，而且优化这里 对整体意义也不大；应该着手优化于内循环即10的8次方这里。内循环次数，由题意，可以知道是由输入的数值x决定的。暴力解法，最大值可取到10的8次方，看其循环意义，是求其约数，故而需要除以[1,x) 的每个值，判断其是否为约数，之后再将所有的约数给相加判断后续逻辑。但 x本身除以一个约数往往可以得到另外一个约数，如果在这里思考下手并优化，极有可能减少至少开根号的循环量</p><p>(2)使用数学函数，sqrt 作为限制循环次数的条件，而另外一个约数则由输入数x除以当前的循环的约数，即可求得另一约数 注：此处需要考虑等于的情况，比如16 开根号是4 4也是约数 优化过后，复杂度为O(10^4*100) 100万 完全hold住</p><p>(3)以后遇到此类题，诸如<font style="color:#DF2A3F;">质数、完全数 等定义中带有约数、需要整除</font>，优化方面皆可朝开平方处思考</p><p>:::</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i  <span class="token operator">&lt;=</span> x <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> sum <span class="token operator">+=</span> i<span class="token punctuation">;</span> <span class="token comment">// 排除1的情况 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">!=</span> x <span class="token operator">/</span> i <span class="token operator">&amp;&amp;</span> x <span class="token operator">/</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> sum <span class="token operator">+=</span> x <span class="token operator">/</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> x<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is perfect\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is not perfect\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="A-727-菱形"><a href="#A-727-菱形" class="headerlink" title="A 727. 菱形"></a>A 727. 菱形</h4><p><a href="https://www.acwing.com/problem/content/729/">https://www.acwing.com/problem/content/729/</a></p><p>:::success<br>曼哈顿距离  |x1-x2| + |y1 - y2|  </p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1716647000839-905b51ac-557d-49d2-b60a-40ce5c574b4f.png"></p><p>:::</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> ex  <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>ey <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//曼哈顿公式中的x1,x2</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//abs(i-ex) + abs(j-ey) 就是曼哈顿距离 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> ex<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>j <span class="token operator">-</span> ey<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token char">'*'</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法基础 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一讲_c++入门及简单的顺序结构</title>
      <link href="/archives/a0e5e832.html"/>
      <url>/archives/a0e5e832.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1713085907607-470ec3ef-047f-4be7-9851-fd33d0f88e09.png"></p><h3 id="整理问题"><a href="#整理问题" class="headerlink" title="整理问题"></a>整理问题</h3><h4 id="A604-圆的面积"><a href="#A604-圆的面积" class="headerlink" title="A604.圆的面积"></a>A604.圆的面积</h4><p><a href="https://www.acwing.com/problem/content/606/">https://www.acwing.com/problem/content/606/</a></p><p>:::success<br>着重注意题目要求输出保留四位小数</p><p>有两种题解</p><p>scanf/printf格式</p><p>cin/cout格式</p><p>:::</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//scanf/printf解法</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14159</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> R<span class="token punctuation">,</span>A<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    A <span class="token operator">=</span> PI <span class="token operator">*</span> R <span class="token operator">*</span> R<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A=%.4lf"</span><span class="token punctuation">,</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//printf格式化输出 double用%lf float用%f</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip&gt;</span> <span class="token comment">//应用 fixed &lt;&lt; setprecision(x) &lt;&lt; 变量名  x是指保留变量的几位小数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14159</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> R<span class="token punctuation">,</span>A<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> R<span class="token punctuation">;</span>    A <span class="token operator">=</span> PI <span class="token operator">*</span> R <span class="token operator">*</span> R<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A="</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="A653-钞票"><a href="#A653-钞票" class="headerlink" title="A653.钞票"></a>A653.钞票</h4><p><a href="https://www.acwing.com/problem/content/655/">https://www.acwing.com/problem/content/655/</a></p><p>:::success<br>这种题就是考分析能力，目前看是两种解法 </p><p>1.暴力解</p><p>1.1 纯暴力硬拼</p><p>1.2 借助数组和循环语句</p><p>:::</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//576</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//n/100 就可以知道需要几张100</span>    cout <span class="token operator">&lt;&lt;</span> n<span class="token operator">/</span><span class="token number">100</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" nota(s) de R$ 100,00"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//n%100 就可以得到后两位 再除以50 可知道50的张数</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">50</span> <span class="token operator">&lt;&lt;</span><span class="token string">" nota(s) de R$ 50,00"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//50可以被100整除 所以只需 n%50 / 20</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">/</span><span class="token number">20</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" nota(s) de R$ 20,00"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//20不能被50整除  n%50%20 / 10</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" nota(s) de R$ 10,00"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//接下来就剩个位 对10取余 n%10/5 </span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" nota(s) de R$ 5,00"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//5能被10整除 n % 5 / 2</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" nota(s) de R$ 2,00"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//2不能被5整除 n%5%2</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" nota(s) de R$ 1,00"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> n<span class="token operator">/</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span><span class="token string">" nota(s) de R$ "</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">",00"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        n <span class="token operator">%=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="A610-工资和奖金"><a href="#A610-工资和奖金" class="headerlink" title="A610.工资和奖金"></a>A610.工资和奖金</h4><p><a href="https://www.acwing.com/problem/content/612/">https://www.acwing.com/problem/content/612/</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">;</span>    <span class="token keyword">double</span> sal<span class="token punctuation">,</span>qua<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> name <span class="token operator">&gt;&gt;</span> sal <span class="token operator">&gt;&gt;</span> qua<span class="token punctuation">;</span>    <span class="token keyword">double</span> sum <span class="token operator">=</span> sal <span class="token operator">+</span> qua <span class="token operator">*</span> <span class="token number">0.15</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"TOTAL = R$ "</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:::success<br>以上代码会输出结果为0.0，因为char类型的变量只能存储一个字符，但是如果你的输入缓冲区输入了大于一个字符，其他数据会停留在输入缓冲区，这时，工资和薪资变量就是初始值0.0,自然结果就是0.0</p><p>两种解决方法</p><ol><li>使用字符数组存储 比如 char[] name</li><li>引入头文件<string> 借用string类型存储</string></li></ol><p>:::</p><h4 id="A617-距离"><a href="#A617-距离" class="headerlink" title="A617.距离"></a>A617.距离</h4><p><a href="https://www.acwing.com/problem/content/619/">https://www.acwing.com/problem/content/619/</a></p><p>:::success<br>经验：当输出的数字是浮点型时，要么保留0位小数，要么转换为整数型</p><p>:::</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> way<span class="token punctuation">;</span>     cin <span class="token operator">&gt;&gt;</span> way<span class="token punctuation">;</span>    <span class="token keyword">double</span> res <span class="token operator">=</span> way <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">60.0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> <span class="token string">" minutos"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> way<span class="token punctuation">;</span>     cin <span class="token operator">&gt;&gt;</span> way<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>way <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">60.0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" minutos"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法基础 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二讲 判断语句</title>
      <link href="/archives/7631ad8a.html"/>
      <url>/archives/7631ad8a.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28565788/1713256825239-2ef94962-2b41-44c3-a9aa-7865cd249c18.png"></p><h3 id="整理问题"><a href="#整理问题" class="headerlink" title="整理问题"></a>整理问题</h3><h4 id="A662-点的坐标"><a href="#A662-点的坐标" class="headerlink" title="A662.点的坐标"></a>A662.点的坐标</h4><p><a href="https://www.acwing.com/problem/content/664/">https://www.acwing.com/problem/content/664/</a></p><p>:::success<br>利用三目运算符可以使得代码更加简洁</p><p>:::</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//配合三目运算符</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Origem"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">*</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"Eixo Y"</span> <span class="token operator">:</span> <span class="token string">"Eixo X"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"Q1"</span> <span class="token operator">:</span> <span class="token string">"Q4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"Q2"</span> <span class="token operator">:</span> <span class="token string">"Q3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="A666-三角形类型"><a href="#A666-三角形类型" class="headerlink" title="A666. 三角形类型"></a>A666. 三角形类型</h4><p><a href="https://www.acwing.com/problem/content/submission/668/">https://www.acwing.com/problem/content/submission/668/</a></p><p>:::success</p><ol><li>输入三个数 将他们依次从大到小存储<ol><li>借用<algorithm>中的swap函数实现降序功能</algorithm></li></ol></li><li>判断三个数相等 判断条件不能写成(a==b==c) 应该写(a==b&amp;&amp;a==c)</li></ol><p>:::</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token comment">//降序排列</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="A668-游戏时间2"><a href="#A668-游戏时间2" class="headerlink" title="A668. 游戏时间2"></a>A668. 游戏时间2</h4><p><a href="https://www.acwing.com/problem/content/670/">https://www.acwing.com/problem/content/670/</a></p><p>:::success<br>两种思路</p><ol><li>利用分钟相减，时钟相减，然后分钟不够时钟来补的思路<ol><li>分钟不够，小时来借</li><li>小时不够，加上24</li><li>相差刚好24</li></ol></li><li>先计算出相差时间（分钟），然后通过加上预设的一天再对整体取余能够求出实际相差的分钟数，不过要注意结果如果为0，那便是刚好一整天，通过三目运算符解决一下特殊情况</li></ol><p>:::</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c <span class="token operator">&gt;&gt;</span> d<span class="token punctuation">;</span>    <span class="token comment">//d - b 找分钟 c - a找小时</span>        <span class="token comment">//处理几种情况</span>        <span class="token comment">//1. 分钟不够拿小时借</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>         d <span class="token operator">+=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//2. 小时不够24补上</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> c<span class="token punctuation">)</span> c <span class="token operator">+=</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token comment">//3.正好24h</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> d<span class="token punctuation">)</span> c <span class="token operator">+=</span> <span class="token number">24</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"O JOGO DUROU %d HORA(S) E %d MINUTO(S)\n"</span><span class="token punctuation">,</span>c<span class="token operator">-</span>a<span class="token punctuation">,</span>d<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c <span class="token operator">&gt;&gt;</span>d<span class="token punctuation">;</span>    <span class="token keyword">int</span> min1<span class="token punctuation">,</span>min2<span class="token punctuation">;</span>    <span class="token comment">//准确计算相差时间</span>    min1 <span class="token operator">=</span> b <span class="token operator">+</span> a <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>  <span class="token comment">//转为分钟计算</span>    min2 <span class="token operator">=</span> d <span class="token operator">+</span> c <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token comment">//通过加上预设的一天再整体取余可以保证这个分钟数小于1440（24 * 60 ）</span>    a <span class="token operator">=</span> <span class="token punctuation">(</span>min2 <span class="token operator">-</span> min1 <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//考虑特殊情况就是 相差刚好为一天 也就是a 是否为0</span>    a <span class="token operator">=</span> a <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"O JOGO DUROU %d HORA(S) E %d MINUTO(S)\n"</span><span class="token punctuation">,</span>a <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">,</span>a <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法基础 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架概述</title>
      <link href="/archives/1e6fc079.html"/>
      <url>/archives/1e6fc079.html</url>
      
        <content type="html"><![CDATA[<h4 id="Spring-框架概述"><a href="#Spring-框架概述" class="headerlink" title="Spring 框架概述"></a>Spring 框架概述</h4><h5 id="1-spring"><a href="#1-spring" class="headerlink" title="1. spring"></a>1. spring</h5><ul><li><p>Spring 是轻量的、开源的JavaEE 框架</p><span id="more"></span></li><li><p>Spring 框架基本涵盖了企业级应用开发的多个方面，大大降低了解企业应用的复杂性</p></li><li><p>Spring 有两个核心部分: IOC 和 AOP</p><ul><li>IOC : (Inversion of control )控制反转，将创建对象的过程交给Spring 进行管理</li><li>AOP ：面向切面，不修改源代码进行功能的增强</li></ul></li><li><p>Spring 的特点:</p><ul><li>方便解耦，降低耦合程度，简化开发</li><li>AOP的编程支持</li><li>声明式事务的支持</li><li>方便进行程序的测试</li><li>方便和其他框架进行整合</li><li>降低了API开发难度</li><li>java源码的经典学习范例<ul><li>spring 源码设计精妙，结构清晰，处处体现着对java设计模式的灵活运用以及对java技术的高深造诣</li></ul></li></ul></li></ul><h5 id="2-Spring-框架结构"><a href="#2-Spring-框架结构" class="headerlink" title="2. Spring 框架结构"></a>2. Spring 框架结构</h5><p><strong><img src="/archives/1e6fc079/image-1.png" class=""></strong></p><ol><li><p>Data Access/Integration(数据访问/集成)</p></li><li><p>Web 模块</p></li><li><p>Core Container(Spring 的核心容器)</p></li><li><p>AOP 、 Aspects、Instrumentation、Messaging</p></li><li><p>Test 模块</p><p>详细内容见 <a href="http://c.biancheng.net/spring/module.html">http://c.biancheng.net/spring/module.html</a></p></li></ol><h5 id="3-Spring-入门案例"><a href="#3-Spring-入门案例" class="headerlink" title="3. Spring 入门案例"></a>3. Spring 入门案例</h5><ol><li>Spring 文档结构</li></ol><p>​<strong><img src="/archives/1e6fc079/image-2.png" class=""></strong></p><ul><li>docs : spring 中一些官方文档</li><li>libs : spring 中的jar包 , 每个容器都有三个jar包</li></ul><p>​<strong><img src="/archives/1e6fc079/image-3.png" class=""></strong></p><ul><li>schema: 映射，内部都是以后缀名为.xsd的文件</li></ul><p>​             xsd (xml shema document )是xml架构定义文件，用于定义相应XML文件中的数据结构、数据类型等信息。</p><ol start="2"><li>第一个案例<ol><li>打开idea工具，创建普通java工程</li><li>导入Spring5 相关jar包</li></ol></li></ol><p><strong><img src="/archives/1e6fc079/image-4.png" class=""></strong></p><p>​ 3.  导入jar包添加依赖</p><p>​       <strong><img src="/archives/1e6fc079/image-6.png" class=""></strong></p><ul><li><p>第一种方法：</p><p><strong><img src="/archives/1e6fc079/image-7.png" class=""></strong></p></li><li><p>第二种方法：</p><ul><li>第一步</li></ul><p><strong><img src="/archives/1e6fc079/image-8.png" class=""></strong></p><ul><li>第二步</li></ul><p><strong><img src="/archives/1e6fc079/image-9.png" class=""></strong></p><ul><li>第三步</li></ul></li></ul><p>​<strong><img src="/archives/1e6fc079/image-10.png" class=""></strong></p><p>​4.创建普通类，在这个类上创建普通方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add..."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​5. 创建Spring 配置文件，在配置文件配置创建的对象</p><p> 注意：Spring 配置文件使用xml格式编写</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--配置User对象创建 id的值为别名--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​6. 进行测试代码的编写 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//1. 加载spring 配置文件</span>      <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 获取配置创建对象</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/archives/b24dd347.html"/>
      <url>/archives/b24dd347.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>4.25.2022 网课上完 用markdown记笔记</p><ol><li>web前端10节课（jquery,js）</li></ol><span id="more"></span><ol start="2"><li><p>设计模式10节课</p></li><li><p>Linux 10节课</p></li><li><p>博客blog 搭建美化</p></li><li><p>乐跑</p></li><li><p>易打印开会</p></li><li><p>练习吉他</p></li></ol><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.shunxin.cn/">www.shunxin.cn</a></p>]]></content>
      
      
      <categories>
          
          <category> commonlife </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> commonlife </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
